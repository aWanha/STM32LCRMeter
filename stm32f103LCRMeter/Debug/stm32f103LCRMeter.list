
stm32f103LCRMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08006ae0  08006ae0  00016ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce0  08006ce0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ce0  08006ce0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ce0  08006ce0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002184  2000000c  08006cf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002190  08006cf4  00022190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099ab  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ceb  00000000  00000000  000299e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d5e  00000000  00000000  0002caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6b6  00000000  00000000  00044806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d9a  00000000  00000000  00051ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dac56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e94  00000000  00000000  000daca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ac4 	.word	0x08006ac4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08006ac4 	.word	0x08006ac4

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2uiz>:
 8000bb4:	004a      	lsls	r2, r1, #1
 8000bb6:	d211      	bcs.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d211      	bcs.n	8000be2 <__aeabi_d2uiz+0x2e>
 8000bbe:	d50d      	bpl.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d40e      	bmi.n	8000be8 <__aeabi_d2uiz+0x34>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d102      	bne.n	8000bee <__aeabi_d2uiz+0x3a>
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_d2f>:
 8000bf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bfc:	bf24      	itt	cs
 8000bfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c06:	d90d      	bls.n	8000c24 <__aeabi_d2f+0x30>
 8000c08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c28:	d121      	bne.n	8000c6e <__aeabi_d2f+0x7a>
 8000c2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2e:	bfbc      	itt	lt
 8000c30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	4770      	bxlt	lr
 8000c36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3e:	f1c2 0218 	rsb	r2, r2, #24
 8000c42:	f1c2 0c20 	rsb	ip, r2, #32
 8000c46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4e:	bf18      	it	ne
 8000c50:	f040 0001 	orrne.w	r0, r0, #1
 8000c54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c60:	ea40 000c 	orr.w	r0, r0, ip
 8000c64:	fa23 f302 	lsr.w	r3, r3, r2
 8000c68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c6c:	e7cc      	b.n	8000c08 <__aeabi_d2f+0x14>
 8000c6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c72:	d107      	bne.n	8000c84 <__aeabi_d2f+0x90>
 8000c74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c78:	bf1e      	ittt	ne
 8000c7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c82:	4770      	bxne	lr
 8000c84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_frsub>:
 8000c94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	e002      	b.n	8000ca0 <__addsf3>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fsub>:
 8000c9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca0 <__addsf3>:
 8000ca0:	0042      	lsls	r2, r0, #1
 8000ca2:	bf1f      	itttt	ne
 8000ca4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca8:	ea92 0f03 	teqne	r2, r3
 8000cac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb4:	d06a      	beq.n	8000d8c <__addsf3+0xec>
 8000cb6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cbe:	bfc1      	itttt	gt
 8000cc0:	18d2      	addgt	r2, r2, r3
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	4048      	eorgt	r0, r1
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	bfb8      	it	lt
 8000cca:	425b      	neglt	r3, r3
 8000ccc:	2b19      	cmp	r3, #25
 8000cce:	bf88      	it	hi
 8000cd0:	4770      	bxhi	lr
 8000cd2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cde:	bf18      	it	ne
 8000ce0:	4240      	negne	r0, r0
 8000ce2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4249      	negne	r1, r1
 8000cf2:	ea92 0f03 	teq	r2, r3
 8000cf6:	d03f      	beq.n	8000d78 <__addsf3+0xd8>
 8000cf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cfc:	fa41 fc03 	asr.w	ip, r1, r3
 8000d00:	eb10 000c 	adds.w	r0, r0, ip
 8000d04:	f1c3 0320 	rsb	r3, r3, #32
 8000d08:	fa01 f103 	lsl.w	r1, r1, r3
 8000d0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__addsf3+0x78>
 8000d12:	4249      	negs	r1, r1
 8000d14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d1c:	d313      	bcc.n	8000d46 <__addsf3+0xa6>
 8000d1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d22:	d306      	bcc.n	8000d32 <__addsf3+0x92>
 8000d24:	0840      	lsrs	r0, r0, #1
 8000d26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2a:	f102 0201 	add.w	r2, r2, #1
 8000d2e:	2afe      	cmp	r2, #254	; 0xfe
 8000d30:	d251      	bcs.n	8000dd6 <__addsf3+0x136>
 8000d32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	ea40 0003 	orr.w	r0, r0, r3
 8000d44:	4770      	bx	lr
 8000d46:	0049      	lsls	r1, r1, #1
 8000d48:	eb40 0000 	adc.w	r0, r0, r0
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	bf28      	it	cs
 8000d50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d54:	d2ed      	bcs.n	8000d32 <__addsf3+0x92>
 8000d56:	fab0 fc80 	clz	ip, r0
 8000d5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d66:	bfaa      	itet	ge
 8000d68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d6c:	4252      	neglt	r2, r2
 8000d6e:	4318      	orrge	r0, r3
 8000d70:	bfbc      	itt	lt
 8000d72:	40d0      	lsrlt	r0, r2
 8000d74:	4318      	orrlt	r0, r3
 8000d76:	4770      	bx	lr
 8000d78:	f092 0f00 	teq	r2, #0
 8000d7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d80:	bf06      	itte	eq
 8000d82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d86:	3201      	addeq	r2, #1
 8000d88:	3b01      	subne	r3, #1
 8000d8a:	e7b5      	b.n	8000cf8 <__addsf3+0x58>
 8000d8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d94:	bf18      	it	ne
 8000d96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9a:	d021      	beq.n	8000de0 <__addsf3+0x140>
 8000d9c:	ea92 0f03 	teq	r2, r3
 8000da0:	d004      	beq.n	8000dac <__addsf3+0x10c>
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	bf08      	it	eq
 8000da8:	4608      	moveq	r0, r1
 8000daa:	4770      	bx	lr
 8000dac:	ea90 0f01 	teq	r0, r1
 8000db0:	bf1c      	itt	ne
 8000db2:	2000      	movne	r0, #0
 8000db4:	4770      	bxne	lr
 8000db6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dba:	d104      	bne.n	8000dc6 <__addsf3+0x126>
 8000dbc:	0040      	lsls	r0, r0, #1
 8000dbe:	bf28      	it	cs
 8000dc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dca:	bf3c      	itt	cc
 8000dcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd0:	4770      	bxcc	lr
 8000dd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dde:	4770      	bx	lr
 8000de0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de4:	bf16      	itet	ne
 8000de6:	4608      	movne	r0, r1
 8000de8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dec:	4601      	movne	r1, r0
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	bf06      	itte	eq
 8000df2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df6:	ea90 0f01 	teqeq	r0, r1
 8000dfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfe:	4770      	bx	lr

08000e00 <__aeabi_ui2f>:
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e004      	b.n	8000e10 <__aeabi_i2f+0x8>
 8000e06:	bf00      	nop

08000e08 <__aeabi_i2f>:
 8000e08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e0c:	bf48      	it	mi
 8000e0e:	4240      	negmi	r0, r0
 8000e10:	ea5f 0c00 	movs.w	ip, r0
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	e01c      	b.n	8000e5e <__aeabi_l2f+0x2a>

08000e24 <__aeabi_ul2f>:
 8000e24:	ea50 0201 	orrs.w	r2, r0, r1
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e00a      	b.n	8000e48 <__aeabi_l2f+0x14>
 8000e32:	bf00      	nop

08000e34 <__aeabi_l2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	d502      	bpl.n	8000e48 <__aeabi_l2f+0x14>
 8000e42:	4240      	negs	r0, r0
 8000e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e48:	ea5f 0c01 	movs.w	ip, r1
 8000e4c:	bf02      	ittt	eq
 8000e4e:	4684      	moveq	ip, r0
 8000e50:	4601      	moveq	r1, r0
 8000e52:	2000      	moveq	r0, #0
 8000e54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e58:	bf08      	it	eq
 8000e5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e62:	fabc f28c 	clz	r2, ip
 8000e66:	3a08      	subs	r2, #8
 8000e68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e6c:	db10      	blt.n	8000e90 <__aeabi_l2f+0x5c>
 8000e6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e72:	4463      	add	r3, ip
 8000e74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e78:	f1c2 0220 	rsb	r2, r2, #32
 8000e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e80:	fa20 f202 	lsr.w	r2, r0, r2
 8000e84:	eb43 0002 	adc.w	r0, r3, r2
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f102 0220 	add.w	r2, r2, #32
 8000e94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e98:	f1c2 0220 	rsb	r2, r2, #32
 8000e9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea4:	eb43 0002 	adc.w	r0, r3, r2
 8000ea8:	bf08      	it	eq
 8000eaa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eae:	4770      	bx	lr

08000eb0 <timerSettings>:
 */
#include "main.h"
#include "tim.h"
#include "math.h"

void timerSettings(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4817      	ldr	r0, [pc, #92]	; (8000f18 <timerSettings+0x68>)
 8000eba:	f003 fa39 	bl	8004330 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4815      	ldr	r0, [pc, #84]	; (8000f18 <timerSettings+0x68>)
 8000ec2:	f003 fa35 	bl	8004330 <HAL_TIM_IC_Start>

  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_3);
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <timerSettings+0x6c>)
 8000eca:	f003 fa31 	bl	8004330 <HAL_TIM_IC_Start>

  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <timerSettings+0x70>)
 8000ed2:	f002 fe73 	bl	8003bbc <HAL_TIM_OC_Start>

  uint32_t filter = 8;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	607b      	str	r3, [r7, #4]

  TIM3->CCMR2 &= ~(0xF << 4);
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <timerSettings+0x74>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <timerSettings+0x74>)
 8000ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ee4:	61d3      	str	r3, [r2, #28]
  TIM3->CCMR2 |= (filter<<12);
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <timerSettings+0x74>)
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	031b      	lsls	r3, r3, #12
 8000eee:	490d      	ldr	r1, [pc, #52]	; (8000f24 <timerSettings+0x74>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61cb      	str	r3, [r1, #28]

  TIM3->CCMR1 &= ~(0xF << 12);
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <timerSettings+0x74>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <timerSettings+0x74>)
 8000efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000efe:	6193      	str	r3, [r2, #24]
  TIM3->CCMR1 |= (filter<<12);
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <timerSettings+0x74>)
 8000f02:	699a      	ldr	r2, [r3, #24]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	031b      	lsls	r3, r3, #12
 8000f08:	4906      	ldr	r1, [pc, #24]	; (8000f24 <timerSettings+0x74>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	618b      	str	r3, [r1, #24]

  }
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200020b8 	.word	0x200020b8
 8000f1c:	20002070 	.word	0x20002070
 8000f20:	20002100 	.word	0x20002100
 8000f24:	40000400 	.word	0x40000400

08000f28 <compare>:

uint8_t compare(double valueTarget,double valueCompare, double maxDeviation){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f32:	e9c7 2300 	strd	r2, r3, [r7]

     if( ( (1 - maxDeviation) * valueCompare <= valueTarget) && (valueTarget <= (1 + maxDeviation) * valueCompare) )return 1;
 8000f36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4919      	ldr	r1, [pc, #100]	; (8000fa4 <compare+0x7c>)
 8000f40:	f7ff f9be 	bl	80002c0 <__aeabi_dsub>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f50:	f7ff fb6e 	bl	8000630 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f5c:	f7ff fdee 	bl	8000b3c <__aeabi_dcmpge>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d019      	beq.n	8000f9a <compare+0x72>
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <compare+0x7c>)
 8000f6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f70:	f7ff f9a8 	bl	80002c4 <__adddf3>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f80:	f7ff fb56 	bl	8000630 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f8c:	f7ff fdcc 	bl	8000b28 <__aeabi_dcmple>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <compare+0x72>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <compare+0x74>

    else return 0;
 8000f9a:	2300      	movs	r3, #0

}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	3ff00000 	.word	0x3ff00000

08000fa8 <filterList>:

double filterList(double maxDeviation, uint32_t *list, uint32_t list_len){
 8000fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fac:	b093      	sub	sp, #76	; 0x4c
 8000fae:	af02      	add	r7, sp, #8
 8000fb0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	466b      	mov	r3, sp
 8000fba:	461e      	mov	r6, r3

    uint16_t acceptedValues[list_len];
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4688      	mov	r8, r1
 8000fc8:	4699      	mov	r9, r3
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000fd6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000fda:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000fde:	2300      	movs	r3, #0
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	461d      	mov	r5, r3
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	012b      	lsls	r3, r5, #4
 8000fee:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ff2:	0122      	lsls	r2, r4, #4
 8000ff4:	004b      	lsls	r3, r1, #1
 8000ff6:	3307      	adds	r3, #7
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	ebad 0d03 	sub.w	sp, sp, r3
 8001000:	ab02      	add	r3, sp, #8
 8001002:	3301      	adds	r3, #1
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	613b      	str	r3, [r7, #16]

     for(uint32_t i = 0; i < list_len; i++){
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
 800100e:	e007      	b.n	8001020 <filterList+0x78>

        acceptedValues[i] = 0;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001014:	2100      	movs	r1, #0
 8001016:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
     for(uint32_t i = 0; i < list_len; i++){
 800101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101c:	3301      	adds	r3, #1
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d3f3      	bcc.n	8001010 <filterList+0x68>
     }

    uint32_t highestWeight = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t highestWeight_index = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	637b      	str	r3, [r7, #52]	; 0x34

    for(uint32_t i = 0; i < list_len; i++){
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
 8001034:	e05c      	b.n	80010f0 <filterList+0x148>

        if(acceptedValues[i] != 0)continue; //skip iteration if sample[i] has already received weight, reduces amount of iteration but will drift the center of values towards first matching sample[settings->resultIndex]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800103a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d152      	bne.n	80010e8 <filterList+0x140>

        for(uint32_t j = 0; j < list_len; j++){
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001046:	e04a      	b.n	80010de <filterList+0x136>

            if(i == j)continue;
 8001048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104c:	429a      	cmp	r2, r3
 800104e:	d042      	beq.n	80010d6 <filterList+0x12e>

            if(compare(list[i],list[j],maxDeviation)){
 8001050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa6e 	bl	800053c <__aeabi_ui2d>
 8001060:	4604      	mov	r4, r0
 8001062:	460d      	mov	r5, r1
 8001064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa64 	bl	800053c <__aeabi_ui2d>
 8001074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001078:	e9cd 2300 	strd	r2, r3, [sp]
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff ff50 	bl	8000f28 <compare>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d024      	beq.n	80010d8 <filterList+0x130>

                acceptedValues[i] +=1;
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001092:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001096:	3301      	adds	r3, #1
 8001098:	b299      	uxth	r1, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800109e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

                acceptedValues[j] +=1;
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010aa:	3301      	adds	r3, #1
 80010ac:	b299      	uxth	r1, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

                if(acceptedValues[j] > highestWeight){
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010be:	461a      	mov	r2, r3
 80010c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d208      	bcs.n	80010d8 <filterList+0x130>

                    highestWeight = acceptedValues[j];
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                    highestWeight_index = j;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
 80010d4:	e000      	b.n	80010d8 <filterList+0x130>
            if(i == j)continue;
 80010d6:	bf00      	nop
        for(uint32_t j = 0; j < list_len; j++){
 80010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010da:	3301      	adds	r3, #1
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d3b0      	bcc.n	8001048 <filterList+0xa0>
 80010e6:	e000      	b.n	80010ea <filterList+0x142>
        if(acceptedValues[i] != 0)continue; //skip iteration if sample[i] has already received weight, reduces amount of iteration but will drift the center of values towards first matching sample[settings->resultIndex]
 80010e8:	bf00      	nop
    for(uint32_t i = 0; i < list_len; i++){
 80010ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ec:	3301      	adds	r3, #1
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
 80010f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d39e      	bcc.n	8001036 <filterList+0x8e>
                }
            }
        }
    }
    double average = 0;
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c7 2308 	strd	r2, r3, [r7, #32]
    uint16_t count = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	83fb      	strh	r3, [r7, #30]

    for(uint32_t i = 0; i < list_len; i++){
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	e03f      	b.n	800118e <filterList+0x1e6>

        if(compare(list[i],list[highestWeight_index],maxDeviation*1.2)){
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa0f 	bl	800053c <__aeabi_ui2d>
 800111e:	4604      	mov	r4, r0
 8001120:	460d      	mov	r5, r1
 8001122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa05 	bl	800053c <__aeabi_ui2d>
 8001132:	4680      	mov	r8, r0
 8001134:	4689      	mov	r9, r1
 8001136:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <filterList+0x214>)
 800113c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001140:	f7ff fa76 	bl	8000630 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9cd 2300 	strd	r2, r3, [sp]
 800114c:	4642      	mov	r2, r8
 800114e:	464b      	mov	r3, r9
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff fee8 	bl	8000f28 <compare>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d014      	beq.n	8001188 <filterList+0x1e0>

            average += list[i];
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9e7 	bl	800053c <__aeabi_ui2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001176:	f7ff f8a5 	bl	80002c4 <__adddf3>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	e9c7 2308 	strd	r2, r3, [r7, #32]
            count +=1;
 8001182:	8bfb      	ldrh	r3, [r7, #30]
 8001184:	3301      	adds	r3, #1
 8001186:	83fb      	strh	r3, [r7, #30]
    for(uint32_t i = 0; i < list_len; i++){
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	3301      	adds	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3bb      	bcc.n	800110e <filterList+0x166>
        }
    }
    return average / count;
 8001196:	8bfb      	ldrh	r3, [r7, #30]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9df 	bl	800055c <__aeabi_i2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011a6:	f7ff fb6d 	bl	8000884 <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	46b5      	mov	sp, r6
}
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	3744      	adds	r7, #68	; 0x44
 80011b6:	46bd      	mov	sp, r7
 80011b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011bc:	3ff33333 	.word	0x3ff33333

080011c0 <measureLCR>:


uint8_t measureLCR(uint32_t *buffer, uint32_t bufferSize,uint16_t delay){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4613      	mov	r3, r2
 80011cc:	80fb      	strh	r3, [r7, #6]

  for(uint32_t i = 0; i < bufferSize; i++){
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e014      	b.n	80011fe <measureLCR+0x3e>

    HAL_Delay(delay);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fb36 	bl	8002848 <HAL_Delay>
    buffer[i] = TIM3->CCR2 + (TIM2->CCR3)*65535;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <measureLCR+0x50>)
 80011de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011e6:	4613      	mov	r3, r2
 80011e8:	041b      	lsls	r3, r3, #16
 80011ea:	1a9a      	subs	r2, r3, r2
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	4403      	add	r3, r0
 80011f4:	440a      	add	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
  for(uint32_t i = 0; i < bufferSize; i++){
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	429a      	cmp	r2, r3
 8001204:	d3e6      	bcc.n	80011d4 <measureLCR+0x14>
  }

  return 1;
 8001206:	2301      	movs	r3, #1
  }
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40000400 	.word	0x40000400
 8001214:	00000000 	.word	0x00000000

08001218 <calculateLCR>:

double calculateLCR(measureSettings *settings){
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]

  double result = 0;
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  uint8_t i = settings->resultIndex;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001234:	73fb      	strb	r3, [r7, #15]

  //if(settings->Farad_HenryResult[i] == -1)return -1; //if reactance measurement was discarded, esr measurement is skipped

  if( clockMHz *10000 < settings->sample[i]||settings->sample[i] < clockMHz/2){ // if sample[i] width is over 10mS or below 1/2 uS it is discarded and indicator "-1" is placed (too large reactance to resistance difference)
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123e:	4a86      	ldr	r2, [pc, #536]	; (8001458 <calculateLCR+0x240>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d805      	bhi.n	8001250 <calculateLCR+0x38>
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124c:	2b23      	cmp	r3, #35	; 0x23
 800124e:	d824      	bhi.n	800129a <calculateLCR+0x82>

    if(settings->r20Active){ //ESR MEASUREMENT
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d011      	beq.n	800127e <calculateLCR+0x66>

      settings->esrResult[i] = settings->sample[i];
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001262:	7bfc      	ldrb	r4, [r7, #15]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f969 	bl	800053c <__aeabi_ui2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f104 010e 	add.w	r1, r4, #14
 8001274:	00c9      	lsls	r1, r1, #3
 8001276:	4401      	add	r1, r0
 8001278:	e9c1 2300 	strd	r2, r3, [r1]
 800127c:	e009      	b.n	8001292 <calculateLCR+0x7a>

    }else{

      settings->Farad_HenryResult[i] = -1;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	3304      	adds	r3, #4
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	18d1      	adds	r1, r2, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b73      	ldr	r3, [pc, #460]	; (800145c <calculateLCR+0x244>)
 800128e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return -1;
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b71      	ldr	r3, [pc, #452]	; (800145c <calculateLCR+0x244>)
 8001298:	e25e      	b.n	8001758 <calculateLCR+0x540>
  }

  if(settings->r20Active){ //ESR MEASUREMENT
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 8194 	beq.w	80015ce <calculateLCR+0x3b6>

    if( settings->currentLeading ){//CAPACITIVE
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80d9 	beq.w	8001464 <calculateLCR+0x24c>

      settings->Farad_HenryResultR20[i] = -1/(settings->measureResistance * tan(M_PI * 2 * settings->sample[i] / (double)clockFreq * settings->frequency) * 2 * M_PI * settings->frequency);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f93b 	bl	800053c <__aeabi_ui2d>
 80012c6:	a35e      	add	r3, pc, #376	; (adr r3, 8001440 <calculateLCR+0x228>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f9b0 	bl	8000630 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	a35b      	add	r3, pc, #364	; (adr r3, 8001448 <calculateLCR+0x230>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff fad1 	bl	8000884 <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4690      	mov	r8, r2
 80012e8:	4699      	mov	r9, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f924 	bl	800053c <__aeabi_ui2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4640      	mov	r0, r8
 80012fa:	4649      	mov	r1, r9
 80012fc:	f7ff f998 	bl	8000630 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f004 f9d6 	bl	80056b8 <tan>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff f98c 	bl	8000630 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	f7fe ffce 	bl	80002c4 <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	a347      	add	r3, pc, #284	; (adr r3, 8001450 <calculateLCR+0x238>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7ff f97b 	bl	8000630 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4614      	mov	r4, r2
 8001340:	461d      	mov	r5, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8f8 	bl	800053c <__aeabi_ui2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7ff f96c 	bl	8000630 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	7bfc      	ldrb	r4, [r7, #15]
 800135e:	f04f 0000 	mov.w	r0, #0
 8001362:	493e      	ldr	r1, [pc, #248]	; (800145c <calculateLCR+0x244>)
 8001364:	f7ff fa8e 	bl	8000884 <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f104 0109 	add.w	r1, r4, #9
 8001372:	00c9      	lsls	r1, r1, #3
 8001374:	4401      	add	r1, r0
 8001376:	e9c1 2300 	strd	r2, r3, [r1]

      settings->reactance[i] = -1/(settings->Farad_HenryResult[i] * 2 *M_PI * settings->frequency);
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	3304      	adds	r3, #4
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	f7fe ff9a 	bl	80002c4 <__adddf3>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	a32d      	add	r3, pc, #180	; (adr r3, 8001450 <calculateLCR+0x238>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff f947 	bl	8000630 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4614      	mov	r4, r2
 80013a8:	461d      	mov	r5, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8c4 	bl	800053c <__aeabi_ui2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7ff f938 	bl	8000630 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	7bfc      	ldrb	r4, [r7, #15]
 80013c6:	f04f 0000 	mov.w	r0, #0
 80013ca:	4924      	ldr	r1, [pc, #144]	; (800145c <calculateLCR+0x244>)
 80013cc:	f7ff fa5a 	bl	8000884 <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f104 0113 	add.w	r1, r4, #19
 80013da:	00c9      	lsls	r1, r1, #3
 80013dc:	4401      	add	r1, r0
 80013de:	e9c1 2300 	strd	r2, r3, [r1]

      settings->esrResult[i] = (settings->Farad_HenryResult[i] /settings->Farad_HenryResultR20[i] - 1) * settings->measureResistance;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	3304      	adds	r3, #4
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	3309      	adds	r3, #9
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff fa41 	bl	8000884 <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <calculateLCR+0x248>)
 8001410:	f7fe ff56 	bl	80002c0 <__aeabi_dsub>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001422:	7bfc      	ldrb	r4, [r7, #15]
 8001424:	f7ff f904 	bl	8000630 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f104 010e 	add.w	r1, r4, #14
 8001432:	00c9      	lsls	r1, r1, #3
 8001434:	4401      	add	r1, r0
 8001436:	e9c1 2300 	strd	r2, r3, [r1]
 800143a:	e18b      	b.n	8001754 <calculateLCR+0x53c>
 800143c:	f3af 8000 	nop.w
 8001440:	54442d18 	.word	0x54442d18
 8001444:	401921fb 	.word	0x401921fb
 8001448:	00000000 	.word	0x00000000
 800144c:	41912a88 	.word	0x41912a88
 8001450:	54442d18 	.word	0x54442d18
 8001454:	400921fb 	.word	0x400921fb
 8001458:	000afc80 	.word	0x000afc80
 800145c:	bff00000 	.word	0xbff00000
 8001460:	3ff00000 	.word	0x3ff00000

      //settings->esrResult[i] = ( settings->reactance[i]/(tan(M_PI * 2 * settings->sample[i] / (double)clockFreq * settings->frequency) * 2 * M_PI * settings->frequency) ) - settings->measureResistance;

    }else{//INDUCTIVE

      settings->Farad_HenryResultR20[i] = tan(M_PI * 2 * settings->sample[i] / (double)clockFreq * settings->frequency) * settings->measureResistance / 2 / M_PI / settings->frequency;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f865 	bl	800053c <__aeabi_ui2d>
 8001472:	a3bd      	add	r3, pc, #756	; (adr r3, 8001768 <calculateLCR+0x550>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f8da 	bl	8000630 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	a3ba      	add	r3, pc, #744	; (adr r3, 8001770 <calculateLCR+0x558>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f9fb 	bl	8000884 <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4614      	mov	r4, r2
 8001494:	461d      	mov	r5, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f84e 	bl	800053c <__aeabi_ui2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4620      	mov	r0, r4
 80014a6:	4629      	mov	r1, r5
 80014a8:	f7ff f8c2 	bl	8000630 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f004 f900 	bl	80056b8 <tan>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014be:	f7ff f8b7 	bl	8000630 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014d2:	f7ff f9d7 	bl	8000884 <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	a3a6      	add	r3, pc, #664	; (adr r3, 8001778 <calculateLCR+0x560>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f9ce 	bl	8000884 <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4690      	mov	r8, r2
 80014ee:	4699      	mov	r9, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f821 	bl	800053c <__aeabi_ui2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	7bfc      	ldrb	r4, [r7, #15]
 8001500:	4640      	mov	r0, r8
 8001502:	4649      	mov	r1, r9
 8001504:	f7ff f9be 	bl	8000884 <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f104 0109 	add.w	r1, r4, #9
 8001512:	00c9      	lsls	r1, r1, #3
 8001514:	4401      	add	r1, r0
 8001516:	e9c1 2300 	strd	r2, r3, [r1]

      settings->reactance[i] = (settings->Farad_HenryResult[i] * 2 *M_PI * settings->frequency);
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	f7fe feca 	bl	80002c4 <__adddf3>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	a38f      	add	r3, pc, #572	; (adr r3, 8001778 <calculateLCR+0x560>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7ff f877 	bl	8000630 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4690      	mov	r8, r2
 8001548:	4699      	mov	r9, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fff4 	bl	800053c <__aeabi_ui2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	7bfc      	ldrb	r4, [r7, #15]
 800155a:	4640      	mov	r0, r8
 800155c:	4649      	mov	r1, r9
 800155e:	f7ff f867 	bl	8000630 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f104 0113 	add.w	r1, r4, #19
 800156c:	00c9      	lsls	r1, r1, #3
 800156e:	4401      	add	r1, r0
 8001570:	e9c1 2300 	strd	r2, r3, [r1]

      settings->esrResult[i] = ( settings->Farad_HenryResultR20[i] / settings->Farad_HenryResult[i] - 1) * settings->measureResistance;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	3309      	adds	r3, #9
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	3304      	adds	r3, #4
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff f978 	bl	8000884 <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b77      	ldr	r3, [pc, #476]	; (8001780 <calculateLCR+0x568>)
 80015a2:	f7fe fe8d 	bl	80002c0 <__aeabi_dsub>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b4:	7bfc      	ldrb	r4, [r7, #15]
 80015b6:	f7ff f83b 	bl	8000630 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f104 010e 	add.w	r1, r4, #14
 80015c4:	00c9      	lsls	r1, r1, #3
 80015c6:	4401      	add	r1, r0
 80015c8:	e9c1 2300 	strd	r2, r3, [r1]
 80015cc:	e0c2      	b.n	8001754 <calculateLCR+0x53c>
      //settings->esrResult[i] = ( (settings->reactance[i] / tan(M_PI * 2 * settings->sample[i] / (double)clockFreq * settings->frequency) * 2 * M_PI * settings->frequency) - settings->measureResistance);
    }

  }else{ //REACTANCE MEASUREMENT

    if( settings->currentLeading ){//CAPACITIVE
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d063      	beq.n	80016a0 <calculateLCR+0x488>

      settings->Farad_HenryResult[i] = -1/(settings->measureResistance * tan(M_PI * 2 * settings->sample[i] / (double)clockFreq *settings->frequency) * 2 * M_PI * settings->frequency);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffa8 	bl	800053c <__aeabi_ui2d>
 80015ec:	a35e      	add	r3, pc, #376	; (adr r3, 8001768 <calculateLCR+0x550>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f81d 	bl	8000630 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	a35c      	add	r3, pc, #368	; (adr r3, 8001770 <calculateLCR+0x558>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff f93e 	bl	8000884 <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4690      	mov	r8, r2
 800160e:	4699      	mov	r9, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff91 	bl	800053c <__aeabi_ui2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4640      	mov	r0, r8
 8001620:	4649      	mov	r1, r9
 8001622:	f7ff f805 	bl	8000630 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f004 f843 	bl	80056b8 <tan>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe fff9 	bl	8000630 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	f7fe fe3b 	bl	80002c4 <__adddf3>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	a348      	add	r3, pc, #288	; (adr r3, 8001778 <calculateLCR+0x560>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe ffe8 	bl	8000630 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff65 	bl	800053c <__aeabi_ui2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe ffd9 	bl	8000630 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	7bfc      	ldrb	r4, [r7, #15]
 8001684:	f04f 0000 	mov.w	r0, #0
 8001688:	493e      	ldr	r1, [pc, #248]	; (8001784 <calculateLCR+0x56c>)
 800168a:	f7ff f8fb 	bl	8000884 <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	1d21      	adds	r1, r4, #4
 8001696:	00c9      	lsls	r1, r1, #3
 8001698:	4401      	add	r1, r0
 800169a:	e9c1 2300 	strd	r2, r3, [r1]
 800169e:	e059      	b.n	8001754 <calculateLCR+0x53c>

    }else{//INDUCTIVE

      settings->Farad_HenryResult[i] = tan(M_PI * 2 * settings->sample[i] / (double)clockFreq *settings->frequency) * settings->measureResistance / 2 / M_PI / settings->frequency;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff47 	bl	800053c <__aeabi_ui2d>
 80016ae:	a32e      	add	r3, pc, #184	; (adr r3, 8001768 <calculateLCR+0x550>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffbc 	bl	8000630 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	a32b      	add	r3, pc, #172	; (adr r3, 8001770 <calculateLCR+0x558>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7ff f8dd 	bl	8000884 <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4614      	mov	r4, r2
 80016d0:	461d      	mov	r5, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff30 	bl	800053c <__aeabi_ui2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7fe ffa4 	bl	8000630 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f003 ffe2 	bl	80056b8 <tan>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016fa:	f7fe ff99 	bl	8000630 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170e:	f7ff f8b9 	bl	8000884 <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	a317      	add	r3, pc, #92	; (adr r3, 8001778 <calculateLCR+0x560>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7ff f8b0 	bl	8000884 <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4690      	mov	r8, r2
 800172a:	4699      	mov	r9, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff03 	bl	800053c <__aeabi_ui2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	7bfc      	ldrb	r4, [r7, #15]
 800173c:	4640      	mov	r0, r8
 800173e:	4649      	mov	r1, r9
 8001740:	f7ff f8a0 	bl	8000884 <__aeabi_ddiv>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	1d21      	adds	r1, r4, #4
 800174c:	00c9      	lsls	r1, r1, #3
 800174e:	4401      	add	r1, r0
 8001750:	e9c1 2300 	strd	r2, r3, [r1]
    }

  }

  return result;
 8001754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001764:	f3af 8000 	nop.w
 8001768:	54442d18 	.word	0x54442d18
 800176c:	401921fb 	.word	0x401921fb
 8001770:	00000000 	.word	0x00000000
 8001774:	41912a88 	.word	0x41912a88
 8001778:	54442d18 	.word	0x54442d18
 800177c:	400921fb 	.word	0x400921fb
 8001780:	3ff00000 	.word	0x3ff00000
 8001784:	bff00000 	.word	0xbff00000

08001788 <currentLeading>:

uint8_t currentLeading(){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0

  uint16_t count = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	80fb      	strh	r3, [r7, #6]
  uint16_t timeoutStart = TIM4->CNT;
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <currentLeading+0xf8>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	80bb      	strh	r3, [r7, #4]
  uint16_t timeout = 50000; //50 ms, 65ms max
 8001798:	f24c 3350 	movw	r3, #50000	; 0xc350
 800179c:	807b      	strh	r3, [r7, #2]
  while( (count < 20) && ( (uint16_t)(TIM4->CNT - timeoutStart) < timeout) ){ //wait until both signals have been high for 20 iterations, iterations for filtering
 800179e:	e011      	b.n	80017c4 <currentLeading+0x3c>

    if((GPIOB->IDR & GPIO_PIN_4) && (GPIOB->IDR & GPIO_PIN_5)){
 80017a0:	4b38      	ldr	r3, [pc, #224]	; (8001884 <currentLeading+0xfc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <currentLeading+0x38>
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <currentLeading+0xfc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0320 	and.w	r3, r3, #32
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <currentLeading+0x38>

      count +=1;
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	3301      	adds	r3, #1
 80017bc:	80fb      	strh	r3, [r7, #6]
 80017be:	e001      	b.n	80017c4 <currentLeading+0x3c>

    }else count = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	80fb      	strh	r3, [r7, #6]
  while( (count < 20) && ( (uint16_t)(TIM4->CNT - timeoutStart) < timeout) ){ //wait until both signals have been high for 20 iterations, iterations for filtering
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	2b13      	cmp	r3, #19
 80017c8:	d808      	bhi.n	80017dc <currentLeading+0x54>
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <currentLeading+0xf8>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8e1      	bhi.n	80017a0 <currentLeading+0x18>
  }

  timeoutStart = TIM4->CNT;
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <currentLeading+0xf8>)
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	80bb      	strh	r3, [r7, #4]
  count = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	80fb      	strh	r3, [r7, #6]
  while(count < 20 && ( (uint16_t)(TIM4->CNT - timeoutStart) < timeout) ){ //wait until both signals have been low for 20 iterations, iterations for filtering
 80017e6:	e011      	b.n	800180c <currentLeading+0x84>

    if(!(GPIOB->IDR & GPIO_PIN_4) && !(GPIOB->IDR & GPIO_PIN_5)){
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <currentLeading+0xfc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <currentLeading+0x80>
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <currentLeading+0xfc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d103      	bne.n	8001808 <currentLeading+0x80>

      count +=1;
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3301      	adds	r3, #1
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	e001      	b.n	800180c <currentLeading+0x84>

    }else{

      count = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	80fb      	strh	r3, [r7, #6]
  while(count < 20 && ( (uint16_t)(TIM4->CNT - timeoutStart) < timeout) ){ //wait until both signals have been low for 20 iterations, iterations for filtering
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	2b13      	cmp	r3, #19
 8001810:	d808      	bhi.n	8001824 <currentLeading+0x9c>
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <currentLeading+0xf8>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	b29a      	uxth	r2, r3
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	b29b      	uxth	r3, r3
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8e1      	bhi.n	80017e8 <currentLeading+0x60>

    }
  }


  timeoutStart = TIM4->CNT;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <currentLeading+0xf8>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	80bb      	strh	r3, [r7, #4]
  while( (uint16_t)(TIM4->CNT - timeoutStart < 2) ){} //2 uS delay
 800182a:	bf00      	nop
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <currentLeading+0xf8>)
 800182e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d9f9      	bls.n	800182c <currentLeading+0xa4>

  timeoutStart = TIM4->CNT;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <currentLeading+0xf8>)
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	80bb      	strh	r3, [r7, #4]
  while( (uint16_t)(TIM4->CNT - timeoutStart) < timeout ){ //which signal rises first
 800183e:	e00f      	b.n	8001860 <currentLeading+0xd8>

    if(GPIOB->IDR & GPIO_PIN_4) return 1;
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <currentLeading+0xfc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <currentLeading+0xc8>
 800184c:	2301      	movs	r3, #1
 800184e:	e011      	b.n	8001874 <currentLeading+0xec>
    if(GPIOB->IDR & GPIO_PIN_5) return 0;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <currentLeading+0xfc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <currentLeading+0xd8>
 800185c:	2300      	movs	r3, #0
 800185e:	e009      	b.n	8001874 <currentLeading+0xec>
  while( (uint16_t)(TIM4->CNT - timeoutStart) < timeout ){ //which signal rises first
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <currentLeading+0xf8>)
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	b29a      	uxth	r2, r3
 8001866:	88bb      	ldrh	r3, [r7, #4]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	b29b      	uxth	r3, r3
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	429a      	cmp	r2, r3
 8001870:	d8e6      	bhi.n	8001840 <currentLeading+0xb8>
  }

  return 99; //error
 8001872:	2363      	movs	r3, #99	; 0x63
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40000800 	.word	0x40000800
 8001884:	40010c00 	.word	0x40010c00

08001888 <createSineWave>:


void createSineWave(sineWaveSettings *settings, uint32_t bufferSize){
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]

    uint16_t maxPwmVal = 40;
 8001892:	2328      	movs	r3, #40	; 0x28
 8001894:	83fb      	strh	r3, [r7, #30]
    uint8_t divider = 1;
 8001896:	2301      	movs	r3, #1
 8001898:	777b      	strb	r3, [r7, #29]
    uint32_t dataPoints = clockFreq / settings->frequency;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a5a      	ldr	r2, [pc, #360]	; (8001a08 <createSineWave+0x180>)
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]

    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80018a6:	2100      	movs	r1, #0
 80018a8:	4858      	ldr	r0, [pc, #352]	; (8001a0c <createSineWave+0x184>)
 80018aa:	f002 fc23 	bl	80040f4 <HAL_TIM_PWM_Stop_DMA>
    HAL_GPIO_WritePin(lowpassFilter_GPIO_Port, lowpassFilter_Pin, settings->lowpassFilter);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7c1b      	ldrb	r3, [r3, #16]
 80018b2:	461a      	mov	r2, r3
 80018b4:	2102      	movs	r1, #2
 80018b6:	4856      	ldr	r0, [pc, #344]	; (8001a10 <createSineWave+0x188>)
 80018b8:	f001 fce2 	bl	8003280 <HAL_GPIO_WritePin>

    //lazy division
    for(;maxPwmVal < 255-1; maxPwmVal +=1){ //increase resolution and slice duration
 80018bc:	e00a      	b.n	80018d4 <createSineWave+0x4c>

      if(dataPoints/maxPwmVal < sineWaveArray_len-5)break;
 80018be:	8bfb      	ldrh	r3, [r7, #30]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	f641 72fa 	movw	r2, #8186	; 0x1ffa
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d906      	bls.n	80018dc <createSineWave+0x54>
    for(;maxPwmVal < 255-1; maxPwmVal +=1){ //increase resolution and slice duration
 80018ce:	8bfb      	ldrh	r3, [r7, #30]
 80018d0:	3301      	adds	r3, #1
 80018d2:	83fb      	strh	r3, [r7, #30]
 80018d4:	8bfb      	ldrh	r3, [r7, #30]
 80018d6:	2bfd      	cmp	r3, #253	; 0xfd
 80018d8:	d9f1      	bls.n	80018be <createSineWave+0x36>
 80018da:	e000      	b.n	80018de <createSineWave+0x56>
      if(dataPoints/maxPwmVal < sineWaveArray_len-5)break;
 80018dc:	bf00      	nop

    }

    dataPoints /= maxPwmVal;
 80018de:	8bfb      	ldrh	r3, [r7, #30]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
    TIM1->ARR = maxPwmVal;
 80018e8:	4a4a      	ldr	r2, [pc, #296]	; (8001a14 <createSineWave+0x18c>)
 80018ea:	8bfb      	ldrh	r3, [r7, #30]
 80018ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    for(;divider < 255-1; divider +=1){ // if signal cant be sliced into given array size, make slices longer by slowing timer (prescaler)
 80018ee:	e00a      	b.n	8001906 <createSineWave+0x7e>

      if(dataPoints/divider < bufferSize-5)break;
 80018f0:	7f7b      	ldrb	r3, [r7, #29]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3b05      	subs	r3, #5
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d306      	bcc.n	800190e <createSineWave+0x86>
    for(;divider < 255-1; divider +=1){ // if signal cant be sliced into given array size, make slices longer by slowing timer (prescaler)
 8001900:	7f7b      	ldrb	r3, [r7, #29]
 8001902:	3301      	adds	r3, #1
 8001904:	777b      	strb	r3, [r7, #29]
 8001906:	7f7b      	ldrb	r3, [r7, #29]
 8001908:	2bfd      	cmp	r3, #253	; 0xfd
 800190a:	d9f1      	bls.n	80018f0 <createSineWave+0x68>
 800190c:	e000      	b.n	8001910 <createSineWave+0x88>
      if(dataPoints/divider < bufferSize-5)break;
 800190e:	bf00      	nop

    }
    TIM1->PSC = divider - 1;
 8001910:	7f7b      	ldrb	r3, [r7, #29]
 8001912:	1e5a      	subs	r2, r3, #1
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <createSineWave+0x18c>)
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
    dataPoints /= divider;
 8001918:	7f7b      	ldrb	r3, [r7, #29]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
    float stepSize = 2*3.1416/ dataPoints;
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7fe fe0a 	bl	800053c <__aeabi_ui2d>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	a134      	add	r1, pc, #208	; (adr r1, 8001a00 <createSineWave+0x178>)
 800192e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001932:	f7fe ffa7 	bl	8000884 <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f7ff f959 	bl	8000bf4 <__aeabi_d2f>
 8001942:	4603      	mov	r3, r0
 8001944:	613b      	str	r3, [r7, #16]

   for(uint16_t i = 0;i < dataPoints; i++){
 8001946:	2300      	movs	r3, #0
 8001948:	837b      	strh	r3, [r7, #26]
 800194a:	e047      	b.n	80019dc <createSineWave+0x154>

    float result = i*stepSize;
 800194c:	8b7b      	ldrh	r3, [r7, #26]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fa5a 	bl	8000e08 <__aeabi_i2f>
 8001954:	4603      	mov	r3, r0
 8001956:	4619      	mov	r1, r3
 8001958:	6938      	ldr	r0, [r7, #16]
 800195a:	f7fe fbf9 	bl	8000150 <__aeabi_fmul>
 800195e:	4603      	mov	r3, r0
 8001960:	60fb      	str	r3, [r7, #12]

    sineWaveArray[i] = ( 1 + ( sin(result) * settings->amplitudeCorrection ) ) * maxPwmVal / 2;
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7fe fe0c 	bl	8000580 <__aeabi_f2d>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f003 fe5c 	bl	800562c <sin>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800197a:	f7fe fe59 	bl	8000630 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <createSineWave+0x190>)
 800198c:	f7fe fc9a 	bl	80002c4 <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4614      	mov	r4, r2
 8001996:	461d      	mov	r5, r3
 8001998:	8bfb      	ldrh	r3, [r7, #30]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdde 	bl	800055c <__aeabi_i2d>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4620      	mov	r0, r4
 80019a6:	4629      	mov	r1, r5
 80019a8:	f7fe fe42 	bl	8000630 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019bc:	f7fe ff62 	bl	8000884 <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	8b7c      	ldrh	r4, [r7, #26]
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f7ff f8f3 	bl	8000bb4 <__aeabi_d2uiz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <createSineWave+0x194>)
 80019d4:	551a      	strb	r2, [r3, r4]
   for(uint16_t i = 0;i < dataPoints; i++){
 80019d6:	8b7b      	ldrh	r3, [r7, #26]
 80019d8:	3301      	adds	r3, #1
 80019da:	837b      	strh	r3, [r7, #26]
 80019dc:	8b7b      	ldrh	r3, [r7, #26]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8b3      	bhi.n	800194c <createSineWave+0xc4>

   }
   HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)sineWaveArray, dataPoints);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <createSineWave+0x194>)
 80019ea:	2100      	movs	r1, #0
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <createSineWave+0x184>)
 80019ee:	f002 f9df 	bl	8003db0 <HAL_TIM_PWM_Start_DMA>

}
 80019f2:	bf00      	nop
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bdb0      	pop	{r4, r5, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	f3af 8000 	nop.w
 8001a00:	2e48e8a7 	.word	0x2e48e8a7
 8001a04:	401921ff 	.word	0x401921ff
 8001a08:	044aa200 	.word	0x044aa200
 8001a0c:	20002028 	.word	0x20002028
 8001a10:	40010c00 	.word	0x40010c00
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	3ff00000 	.word	0x3ff00000
 8001a1c:	20000028 	.word	0x20000028

08001a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_DMA_Init+0x38>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <MX_DMA_Init+0x38>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6153      	str	r3, [r2, #20]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_DMA_Init+0x38>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	200c      	movs	r0, #12
 8001a44:	f000 fffb 	bl	8002a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a48:	200c      	movs	r0, #12
 8001a4a:	f001 f814 	bl	8002a76 <HAL_NVIC_EnableIRQ>

}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000

08001a5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a70:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a37      	ldr	r2, [pc, #220]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a88:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a31      	ldr	r2, [pc, #196]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001a8e:	f043 0320 	orr.w	r3, r3, #32
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a2b      	ldr	r2, [pc, #172]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a25      	ldr	r2, [pc, #148]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001abe:	f043 0308 	orr.w	r3, r3, #8
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <MX_GPIO_Init+0xf8>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	4820      	ldr	r0, [pc, #128]	; (8001b58 <MX_GPIO_Init+0xfc>)
 8001ad8:	f001 fbd2 	bl	8003280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2110      	movs	r1, #16
 8001ae0:	481e      	ldr	r0, [pc, #120]	; (8001b5c <MX_GPIO_Init+0x100>)
 8001ae2:	f001 fbcd 	bl	8003280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lowpassFilter_Pin|res20_Pin|res1k_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f640 4102 	movw	r1, #3074	; 0xc02
 8001aec:	481c      	ldr	r0, [pc, #112]	; (8001b60 <MX_GPIO_Init+0x104>)
 8001aee:	f001 fbc7 	bl	8003280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4813      	ldr	r0, [pc, #76]	; (8001b58 <MX_GPIO_Init+0xfc>)
 8001b0c:	f001 fa34 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b10:	2310      	movs	r3, #16
 8001b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_GPIO_Init+0x100>)
 8001b28:	f001 fa26 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = lowpassFilter_Pin|res20_Pin|res1k_Pin;
 8001b2c:	f640 4302 	movw	r3, #3074	; 0xc02
 8001b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_GPIO_Init+0x104>)
 8001b46:	f001 fa17 	bl	8002f78 <HAL_GPIO_Init>

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40011000 	.word	0x40011000
 8001b5c:	40010800 	.word	0x40010800
 8001b60:	40010c00 	.word	0x40010c00
 8001b64:	00000000 	.word	0x00000000

08001b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b6c:	b0d4      	sub	sp, #336	; 0x150
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  //amplitudeCorrection to set the amplitude to within 200mV pk-pk,  value reduces dutycycle width to lower amplitude
  sineWaveSettings Hz50; Hz50.frequency = 50; Hz50.amplitudeCorrection = 0.267857143, Hz50.lowpassFilter = 1;
 8001b70:	2332      	movs	r3, #50	; 0x32
 8001b72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b76:	a3a6      	add	r3, pc, #664	; (adr r3, 8001e10 <main+0x2a8>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
  sineWaveSettings Hz1000; Hz1000.frequency = 1000; Hz1000.amplitudeCorrection = 0.240384615,Hz1000.lowpassFilter = 1;
 8001b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001b8e:	a3a2      	add	r3, pc, #648	; (adr r3, 8001e18 <main+0x2b0>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
  sineWaveSettings Hz10000; Hz10000.frequency = 10000; Hz10000.amplitudeCorrection = 0.319672131,Hz10000.lowpassFilter = 0;
 8001b9e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ba2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ba6:	a39e      	add	r3, pc, #632	; (adr r3, 8001e20 <main+0x2b8>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
  sineWaveSettings Hz50000; Hz50000.frequency = 50000; Hz50000.amplitudeCorrection = 0.339673913,Hz50000.lowpassFilter = 0;
 8001bb6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001bbe:	a39a      	add	r3, pc, #616	; (adr r3, 8001e28 <main+0x2c0>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
  sineWaveSettings Hz100000; Hz100000.frequency = 100000; Hz100000.amplitudeCorrection = 1.0, Hz100000.lowpassFilter = 0;
 8001bce:	4b9a      	ldr	r3, [pc, #616]	; (8001e38 <main+0x2d0>)
 8001bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b98      	ldr	r3, [pc, #608]	; (8001e3c <main+0x2d4>)
 8001bda:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be4:	f000 fdce 	bl	8002784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be8:	f000 f9aa 	bl	8001f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bec:	f7ff ff36 	bl	8001a5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001bf0:	f7ff ff16 	bl	8001a20 <MX_DMA_Init>
  MX_TIM1_Init();
 8001bf4:	f000 fa48 	bl	8002088 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bf8:	f000 fae6 	bl	80021c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bfc:	f000 fb82 	bl	8002304 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c00:	f000 fc20 	bl	8002444 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  timerSettings();
 8001c04:	f7ff f954 	bl	8000eb0 <timerSettings>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  const uint16_t sampleN = 10;
 8001c08:	230a      	movs	r3, #10
 8001c0a:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
  uint32_t average[sampleN];
 8001c0e:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001c18:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4698      	mov	r8, r3
 8001c20:	4691      	mov	r9, r2
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001c2e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001c32:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001c36:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	461c      	mov	r4, r3
 8001c3e:	4615      	mov	r5, r2
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	016b      	lsls	r3, r5, #5
 8001c4a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001c4e:	0162      	lsls	r2, r4, #5
 8001c50:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3307      	adds	r3, #7
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	ebad 0d03 	sub.w	sp, sp, r3
 8001c60:	466b      	mov	r3, sp
 8001c62:	3303      	adds	r3, #3
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  measureSettings.r20Active = 0;
 8001c6c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001c70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

  while (1)
  {
    for(uint8_t i = 0; i < resultSize; i ++){ //null all samples
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8001c80:	e040      	b.n	8001d04 <main+0x19c>

      measureSettings.reactance[i] = 0;
 8001c82:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8001c86:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001c8a:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001c8e:	3313      	adds	r3, #19
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	18d1      	adds	r1, r2, r3
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	e9c1 2300 	strd	r2, r3, [r1]
      measureSettings.Farad_HenryResult[i] = 0;
 8001ca0:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8001ca4:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001ca8:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001cac:	3304      	adds	r3, #4
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	18d1      	adds	r1, r2, r3
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9c1 2300 	strd	r2, r3, [r1]
      measureSettings.Farad_HenryResultR20[i]= 0;
 8001cbe:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8001cc2:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001cc6:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001cca:	3309      	adds	r3, #9
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	18d1      	adds	r1, r2, r3
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9c1 2300 	strd	r2, r3, [r1]
      measureSettings.esrResult[i] = 0;
 8001cdc:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8001ce0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001ce4:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001ce8:	330e      	adds	r3, #14
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	18d1      	adds	r1, r2, r3
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9c1 2300 	strd	r2, r3, [r1]
    for(uint8_t i = 0; i < resultSize; i ++){ //null all samples
 8001cfa:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8001d04:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d9ba      	bls.n	8001c82 <main+0x11a>
    }

    for(uint8_t k = 0; k < 2; k++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8001d12:	e107      	b.n	8001f24 <main+0x3bc>


      for(uint8_t j = 0; j < 5; j ++){ //simple states to iterate through frequencies
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8001d1a:	e0e7      	b.n	8001eec <main+0x384>

        if(j==0){
 8001d1c:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10d      	bne.n	8001d40 <main+0x1d8>
          createSineWave(&Hz50, sineWaveArray_len);
 8001d24:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fdab 	bl	8001888 <createSineWave>
          measureSettings.frequency = Hz50.frequency;
 8001d32:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001d36:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001d3a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d3e:	615a      	str	r2, [r3, #20]
        }
        if(j==1){
 8001d40:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d10d      	bne.n	8001d64 <main+0x1fc>
          createSineWave(&Hz1000,sineWaveArray_len);
 8001d48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fd99 	bl	8001888 <createSineWave>
          measureSettings.frequency = Hz1000.frequency;
 8001d56:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001d5a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001d5e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d62:	615a      	str	r2, [r3, #20]
        }
        if(j==2){
 8001d64:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d10d      	bne.n	8001d88 <main+0x220>
          createSineWave(&Hz10000,sineWaveArray_len);
 8001d6c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fd87 	bl	8001888 <createSineWave>
          measureSettings.frequency = Hz10000.frequency;
 8001d7a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001d7e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001d82:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d86:	615a      	str	r2, [r3, #20]
        }
        if(j==3){
 8001d88:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d10d      	bne.n	8001dac <main+0x244>
          createSineWave(&Hz50000,sineWaveArray_len);
 8001d90:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fd75 	bl	8001888 <createSineWave>
          measureSettings.frequency = Hz50000.frequency;
 8001d9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001da2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001da6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001daa:	615a      	str	r2, [r3, #20]
        }
        if(j==4){
 8001dac:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d10d      	bne.n	8001dd0 <main+0x268>
          createSineWave(&Hz100000,sineWaveArray_len);
 8001db4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fd63 	bl	8001888 <createSineWave>
          measureSettings.frequency = Hz100000.frequency;
 8001dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001dc6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001dca:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001dce:	615a      	str	r2, [r3, #20]
        }

        if(measureSettings.r20Active){
 8001dd0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001dd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001dd8:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d031      	beq.n	8001e44 <main+0x2dc>

          HAL_GPIO_WritePin(res20_GPIO_Port, res20_Pin, 1);
 8001de0:	2201      	movs	r2, #1
 8001de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de6:	4816      	ldr	r0, [pc, #88]	; (8001e40 <main+0x2d8>)
 8001de8:	f001 fa4a 	bl	8003280 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(res1k_GPIO_Port, res1k_Pin, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001df2:	4813      	ldr	r0, [pc, #76]	; (8001e40 <main+0x2d8>)
 8001df4:	f001 fa44 	bl	8003280 <HAL_GPIO_WritePin>
          measureSettings.measureResistance = 20.54;
 8001df8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001dfc:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8001e00:	a30b      	add	r3, pc, #44	; (adr r3, 8001e30 <main+0x2c8>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001e0a:	e030      	b.n	8001e6e <main+0x306>
 8001e0c:	f3af 8000 	nop.w
 8001e10:	494bd6f7 	.word	0x494bd6f7
 8001e14:	3fd12492 	.word	0x3fd12492
 8001e18:	4df17a81 	.word	0x4df17a81
 8001e1c:	3fcec4ec 	.word	0x3fcec4ec
 8001e20:	19059bb2 	.word	0x19059bb2
 8001e24:	3fd47582 	.word	0x3fd47582
 8001e28:	a6e8eb19 	.word	0xa6e8eb19
 8001e2c:	3fd5bd37 	.word	0x3fd5bd37
 8001e30:	70a3d70a 	.word	0x70a3d70a
 8001e34:	40348a3d 	.word	0x40348a3d
 8001e38:	000186a0 	.word	0x000186a0
 8001e3c:	3ff00000 	.word	0x3ff00000
 8001e40:	40010c00 	.word	0x40010c00
        }else{

          HAL_GPIO_WritePin(res20_GPIO_Port, res20_Pin, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4a:	483b      	ldr	r0, [pc, #236]	; (8001f38 <main+0x3d0>)
 8001e4c:	f001 fa18 	bl	8003280 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(res1k_GPIO_Port, res1k_Pin, 1);
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e56:	4838      	ldr	r0, [pc, #224]	; (8001f38 <main+0x3d0>)
 8001e58:	f001 fa12 	bl	8003280 <HAL_GPIO_WritePin>
          measureSettings.measureResistance = 1000;
 8001e5c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e60:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <main+0x3d4>)
 8001e6a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        }

        HAL_Delay(500);
 8001e6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e72:	f000 fce9 	bl	8002848 <HAL_Delay>
        measureSettings.currentLeading = currentLeading();
 8001e76:	f7ff fc87 	bl	8001788 <currentLeading>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e82:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e86:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        measureLCR(average, sampleN,50);
 8001e8a:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001e8e:	2232      	movs	r2, #50	; 0x32
 8001e90:	4619      	mov	r1, r3
 8001e92:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8001e96:	f7ff f993 	bl	80011c0 <measureLCR>

        measureSettings.sample[j] = filterList(0.3, average, sampleN);
 8001e9a:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8001e9e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001ea2:	a123      	add	r1, pc, #140	; (adr r1, 8001f30 <main+0x3c8>)
 8001ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ea8:	f7ff f87e 	bl	8000fa8 <filterList>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	f897 414f 	ldrb.w	r4, [r7, #335]	; 0x14f
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe7c 	bl	8000bb4 <__aeabi_d2uiz>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ec2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ec6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        measureSettings.resultIndex = j;
 8001eca:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ece:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ed2:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8001ed6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
        calculateLCR(&measureSettings);
 8001eda:	463b      	mov	r3, r7
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f99b 	bl	8001218 <calculateLCR>
      for(uint8_t j = 0; j < 5; j ++){ //simple states to iterate through frequencies
 8001ee2:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8001eec:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	f67f af13 	bls.w	8001d1c <main+0x1b4>
      }
      measureSettings.r20Active = !(measureSettings.r20Active);
 8001ef6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001efa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001efe:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001f12:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f16:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    for(uint8_t k = 0; k < 2; k++){
 8001f1a:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8001f24:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	f67f aef3 	bls.w	8001d14 <main+0x1ac>
    for(uint8_t i = 0; i < resultSize; i ++){ //null all samples
 8001f2e:	e6a4      	b.n	8001c7a <main+0x112>
 8001f30:	33333333 	.word	0x33333333
 8001f34:	3fd33333 	.word	0x3fd33333
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	408f4000 	.word	0x408f4000

08001f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b090      	sub	sp, #64	; 0x40
 8001f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f46:	f107 0318 	add.w	r3, r7, #24
 8001f4a:	2228      	movs	r2, #40	; 0x28
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 fdb0 	bl	8006ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f70:	2301      	movs	r3, #1
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f74:	2302      	movs	r3, #2
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f84:	f107 0318 	add.w	r3, r7, #24
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 f991 	bl	80032b0 <HAL_RCC_OscConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f94:	f000 f819 	bl	8001fca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f98:	230f      	movs	r3, #15
 8001f9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 fbfe 	bl	80037b4 <HAL_RCC_ClockConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001fbe:	f000 f804 	bl	8001fca <Error_Handler>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3740      	adds	r7, #64	; 0x40
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fce:	b672      	cpsid	i
}
 8001fd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <Error_Handler+0x8>

08001fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_MspInit+0x40>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_MspInit+0x40>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6193      	str	r3, [r2, #24]
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_MspInit+0x40>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_MspInit+0x40>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_MspInit+0x40>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_MspInit+0x40>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800201c:	e7fe      	b.n	800201c <NMI_Handler+0x4>

0800201e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <HardFault_Handler+0x4>

08002024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <MemManage_Handler+0x4>

0800202a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <BusFault_Handler+0x4>

08002030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <UsageFault_Handler+0x4>

08002036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205e:	f000 fbd7 	bl	8002810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <DMA1_Channel2_IRQHandler+0x10>)
 800206e:	f000 fe4f 	bl	8002d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20002148 	.word	0x20002148

0800207c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b096      	sub	sp, #88	; 0x58
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]
 80020b6:	615a      	str	r2, [r3, #20]
 80020b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	2220      	movs	r2, #32
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 fcf7 	bl	8006ab4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <MX_TIM1_Init+0x138>)
 80020c8:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <MX_TIM1_Init+0x13c>)
 80020ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020cc:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <MX_TIM1_Init+0x138>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d2:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <MX_TIM1_Init+0x138>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <MX_TIM1_Init+0x138>)
 80020da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e0:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <MX_TIM1_Init+0x138>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <MX_TIM1_Init+0x138>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <MX_TIM1_Init+0x138>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020f2:	4833      	ldr	r0, [pc, #204]	; (80021c0 <MX_TIM1_Init+0x138>)
 80020f4:	f001 fcba 	bl	8003a6c <HAL_TIM_Base_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020fe:	f7ff ff64 	bl	8001fca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002106:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002108:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800210c:	4619      	mov	r1, r3
 800210e:	482c      	ldr	r0, [pc, #176]	; (80021c0 <MX_TIM1_Init+0x138>)
 8002110:	f002 fb88 	bl	8004824 <HAL_TIM_ConfigClockSource>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800211a:	f7ff ff56 	bl	8001fca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800211e:	4828      	ldr	r0, [pc, #160]	; (80021c0 <MX_TIM1_Init+0x138>)
 8002120:	f001 fdee 	bl	8003d00 <HAL_TIM_PWM_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800212a:	f7ff ff4e 	bl	8001fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002136:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800213a:	4619      	mov	r1, r3
 800213c:	4820      	ldr	r0, [pc, #128]	; (80021c0 <MX_TIM1_Init+0x138>)
 800213e:	f003 f9c5 	bl	80054cc <HAL_TIMEx_MasterConfigSynchronization>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002148:	f7ff ff3f 	bl	8001fca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800214c:	2370      	movs	r3, #112	; 0x70
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002154:	2300      	movs	r3, #0
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002158:	2300      	movs	r3, #0
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	2200      	movs	r2, #0
 800216e:	4619      	mov	r1, r3
 8002170:	4813      	ldr	r0, [pc, #76]	; (80021c0 <MX_TIM1_Init+0x138>)
 8002172:	f002 fa95 	bl	80046a0 <HAL_TIM_PWM_ConfigChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800217c:	f7ff ff25 	bl	8001fca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002198:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4807      	ldr	r0, [pc, #28]	; (80021c0 <MX_TIM1_Init+0x138>)
 80021a4:	f003 f9f0 	bl	8005588 <HAL_TIMEx_ConfigBreakDeadTime>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80021ae:	f7ff ff0c 	bl	8001fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <MX_TIM1_Init+0x138>)
 80021b4:	f000 fa8c 	bl	80026d0 <HAL_TIM_MspPostInit>

}
 80021b8:	bf00      	nop
 80021ba:	3758      	adds	r7, #88	; 0x58
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20002028 	.word	0x20002028
 80021c4:	40012c00 	.word	0x40012c00

080021c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b090      	sub	sp, #64	; 0x40
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <MX_TIM2_Init+0x138>)
 8002204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002208:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65535-1;
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <MX_TIM2_Init+0x138>)
 800220c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <MX_TIM2_Init+0x138>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <MX_TIM2_Init+0x138>)
 800221a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002220:	4b37      	ldr	r3, [pc, #220]	; (8002300 <MX_TIM2_Init+0x138>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <MX_TIM2_Init+0x138>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800222c:	4834      	ldr	r0, [pc, #208]	; (8002300 <MX_TIM2_Init+0x138>)
 800222e:	f001 fc1d 	bl	8003a6c <HAL_TIM_Base_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002238:	f7ff fec7 	bl	8001fca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002242:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002246:	4619      	mov	r1, r3
 8002248:	482d      	ldr	r0, [pc, #180]	; (8002300 <MX_TIM2_Init+0x138>)
 800224a:	f002 faeb 	bl	8004824 <HAL_TIM_ConfigClockSource>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002254:	f7ff feb9 	bl	8001fca <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002258:	4829      	ldr	r0, [pc, #164]	; (8002300 <MX_TIM2_Init+0x138>)
 800225a:	f002 f811 	bl	8004280 <HAL_TIM_IC_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002264:	f7ff feb1 	bl	8001fca <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002268:	2304      	movs	r3, #4
 800226a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800226c:	2340      	movs	r3, #64	; 0x40
 800226e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 8;
 8002270:	2308      	movs	r3, #8
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	4619      	mov	r1, r3
 800227a:	4821      	ldr	r0, [pc, #132]	; (8002300 <MX_TIM2_Init+0x138>)
 800227c:	f002 fbb4 	bl	80049e8 <HAL_TIM_SlaveConfigSynchro>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8002286:	f7ff fea0 	bl	8001fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	4819      	ldr	r0, [pc, #100]	; (8002300 <MX_TIM2_Init+0x138>)
 800229a:	f003 f917 	bl	80054cc <HAL_TIMEx_MasterConfigSynchronization>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80022a4:	f7ff fe91 	bl	8001fca <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022ac:	2301      	movs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 8;
 80022b4:	2308      	movs	r3, #8
 80022b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	2204      	movs	r2, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4810      	ldr	r0, [pc, #64]	; (8002300 <MX_TIM2_Init+0x138>)
 80022c0:	f002 f952 	bl	8004568 <HAL_TIM_IC_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80022ca:	f7ff fe7e 	bl	8001fca <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2208      	movs	r2, #8
 80022d2:	4619      	mov	r1, r3
 80022d4:	480a      	ldr	r0, [pc, #40]	; (8002300 <MX_TIM2_Init+0x138>)
 80022d6:	f002 f947 	bl	8004568 <HAL_TIM_IC_ConfigChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80022e0:	f7ff fe73 	bl	8001fca <Error_Handler>
  }
  if (HAL_TIM_ConfigTI1Input(&htim2, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <MX_TIM2_Init+0x138>)
 80022e8:	f002 fb63 	bl	80049b2 <HAL_TIM_ConfigTI1Input>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 80022f2:	f7ff fe6a 	bl	8001fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	3740      	adds	r7, #64	; 0x40
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20002070 	.word	0x20002070

08002304 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b090      	sub	sp, #64	; 0x40
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800230a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <MX_TIM3_Init+0x138>)
 8002340:	4a3f      	ldr	r2, [pc, #252]	; (8002440 <MX_TIM3_Init+0x13c>)
 8002342:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002344:	4b3d      	ldr	r3, [pc, #244]	; (800243c <MX_TIM3_Init+0x138>)
 8002346:	2200      	movs	r2, #0
 8002348:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234a:	4b3c      	ldr	r3, [pc, #240]	; (800243c <MX_TIM3_Init+0x138>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <MX_TIM3_Init+0x138>)
 8002352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002356:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002358:	4b38      	ldr	r3, [pc, #224]	; (800243c <MX_TIM3_Init+0x138>)
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <MX_TIM3_Init+0x138>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002364:	4835      	ldr	r0, [pc, #212]	; (800243c <MX_TIM3_Init+0x138>)
 8002366:	f001 fb81 	bl	8003a6c <HAL_TIM_Base_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002370:	f7ff fe2b 	bl	8001fca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800237a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800237e:	4619      	mov	r1, r3
 8002380:	482e      	ldr	r0, [pc, #184]	; (800243c <MX_TIM3_Init+0x138>)
 8002382:	f002 fa4f 	bl	8004824 <HAL_TIM_ConfigClockSource>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800238c:	f7ff fe1d 	bl	8001fca <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002390:	482a      	ldr	r0, [pc, #168]	; (800243c <MX_TIM3_Init+0x138>)
 8002392:	f001 ff75 	bl	8004280 <HAL_TIM_IC_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800239c:	f7ff fe15 	bl	8001fca <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80023a0:	2304      	movs	r3, #4
 80023a2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80023a4:	2340      	movs	r3, #64	; 0x40
 80023a6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	4619      	mov	r1, r3
 80023b6:	4821      	ldr	r0, [pc, #132]	; (800243c <MX_TIM3_Init+0x138>)
 80023b8:	f002 fb16 	bl	80049e8 <HAL_TIM_SlaveConfigSynchro>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80023c2:	f7ff fe02 	bl	8001fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80023c6:	2340      	movs	r3, #64	; 0x40
 80023c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4819      	ldr	r0, [pc, #100]	; (800243c <MX_TIM3_Init+0x138>)
 80023d6:	f003 f879 	bl	80054cc <HAL_TIMEx_MasterConfigSynchronization>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80023e0:	f7ff fdf3 	bl	8001fca <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023e4:	2300      	movs	r3, #0
 80023e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023e8:	2301      	movs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 8;
 80023f0:	2308      	movs	r3, #8
 80023f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	4619      	mov	r1, r3
 80023fa:	4810      	ldr	r0, [pc, #64]	; (800243c <MX_TIM3_Init+0x138>)
 80023fc:	f002 f8b4 	bl	8004568 <HAL_TIM_IC_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8002406:	f7ff fde0 	bl	8001fca <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2204      	movs	r2, #4
 800240e:	4619      	mov	r1, r3
 8002410:	480a      	ldr	r0, [pc, #40]	; (800243c <MX_TIM3_Init+0x138>)
 8002412:	f002 f8a9 	bl	8004568 <HAL_TIM_IC_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 800241c:	f7ff fdd5 	bl	8001fca <Error_Handler>
  }
  if (HAL_TIM_ConfigTI1Input(&htim3, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	4806      	ldr	r0, [pc, #24]	; (800243c <MX_TIM3_Init+0x138>)
 8002424:	f002 fac5 	bl	80049b2 <HAL_TIM_ConfigTI1Input>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 800242e:	f7ff fdcc 	bl	8001fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	3740      	adds	r7, #64	; 0x40
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200020b8 	.word	0x200020b8
 8002440:	40000400 	.word	0x40000400

08002444 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	; 0x38
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	f107 0320 	add.w	r3, r7, #32
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	615a      	str	r2, [r3, #20]
 8002472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <MX_TIM4_Init+0xe0>)
 8002476:	4a2c      	ldr	r2, [pc, #176]	; (8002528 <MX_TIM4_Init+0xe4>)
 8002478:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <MX_TIM4_Init+0xe0>)
 800247c:	2247      	movs	r2, #71	; 0x47
 800247e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <MX_TIM4_Init+0xe0>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <MX_TIM4_Init+0xe0>)
 8002488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800248c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248e:	4b25      	ldr	r3, [pc, #148]	; (8002524 <MX_TIM4_Init+0xe0>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002494:	4b23      	ldr	r3, [pc, #140]	; (8002524 <MX_TIM4_Init+0xe0>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800249a:	4822      	ldr	r0, [pc, #136]	; (8002524 <MX_TIM4_Init+0xe0>)
 800249c:	f001 fae6 	bl	8003a6c <HAL_TIM_Base_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80024a6:	f7ff fd90 	bl	8001fca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b4:	4619      	mov	r1, r3
 80024b6:	481b      	ldr	r0, [pc, #108]	; (8002524 <MX_TIM4_Init+0xe0>)
 80024b8:	f002 f9b4 	bl	8004824 <HAL_TIM_ConfigClockSource>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80024c2:	f7ff fd82 	bl	8001fca <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80024c6:	4817      	ldr	r0, [pc, #92]	; (8002524 <MX_TIM4_Init+0xe0>)
 80024c8:	f001 fb1f 	bl	8003b0a <HAL_TIM_OC_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80024d2:	f7ff fd7a 	bl	8001fca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024de:	f107 0320 	add.w	r3, r7, #32
 80024e2:	4619      	mov	r1, r3
 80024e4:	480f      	ldr	r0, [pc, #60]	; (8002524 <MX_TIM4_Init+0xe0>)
 80024e6:	f002 fff1 	bl	80054cc <HAL_TIMEx_MasterConfigSynchronization>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80024f0:	f7ff fd6b 	bl	8001fca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80024f4:	2300      	movs	r3, #0
 80024f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	2200      	movs	r2, #0
 8002508:	4619      	mov	r1, r3
 800250a:	4806      	ldr	r0, [pc, #24]	; (8002524 <MX_TIM4_Init+0xe0>)
 800250c:	f001 ffd0 	bl	80044b0 <HAL_TIM_OC_ConfigChannel>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002516:	f7ff fd58 	bl	8001fca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	3738      	adds	r7, #56	; 0x38
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20002100 	.word	0x20002100
 8002528:	40000800 	.word	0x40000800

0800252c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08e      	sub	sp, #56	; 0x38
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a59      	ldr	r2, [pc, #356]	; (80026ac <HAL_TIM_Base_MspInit+0x180>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d133      	bne.n	80025b4 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254c:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4a57      	ldr	r2, [pc, #348]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 8002552:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002556:	6193      	str	r3, [r2, #24]
 8002558:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002560:	623b      	str	r3, [r7, #32]
 8002562:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 8002566:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_TIM_Base_MspInit+0x18c>)
 8002568:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800256a:	4b52      	ldr	r3, [pc, #328]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 800256c:	2210      	movs	r2, #16
 800256e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002570:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002576:	4b4f      	ldr	r3, [pc, #316]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800257c:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 800257e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002582:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002584:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 8002586:	2200      	movs	r2, #0
 8002588:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 800258c:	2220      	movs	r2, #32
 800258e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002590:	4b48      	ldr	r3, [pc, #288]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002596:	4847      	ldr	r0, [pc, #284]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 8002598:	f000 fa88 	bl	8002aac <HAL_DMA_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_TIM_Base_MspInit+0x7a>
    {
      Error_Handler();
 80025a2:	f7ff fd12 	bl	8001fca <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a42      	ldr	r2, [pc, #264]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24
 80025ac:	4a41      	ldr	r2, [pc, #260]	; (80026b4 <HAL_TIM_Base_MspInit+0x188>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025b2:	e076      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d124      	bne.n	8002608 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025be:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a3b      	ldr	r2, [pc, #236]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	61d3      	str	r3, [r2, #28]
 80025ca:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	4a35      	ldr	r2, [pc, #212]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6193      	str	r3, [r2, #24]
 80025e2:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80025ee:	2307      	movs	r3, #7
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fe:	4619      	mov	r1, r3
 8002600:	482e      	ldr	r0, [pc, #184]	; (80026bc <HAL_TIM_Base_MspInit+0x190>)
 8002602:	f000 fcb9 	bl	8002f78 <HAL_GPIO_Init>
}
 8002606:	e04c      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <HAL_TIM_Base_MspInit+0x194>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d136      	bne.n	8002680 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002612:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	61d3      	str	r3, [r2, #28]
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6193      	str	r3, [r2, #24]
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002642:	2330      	movs	r3, #48	; 0x30
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002646:	2300      	movs	r3, #0
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002652:	4619      	mov	r1, r3
 8002654:	481b      	ldr	r0, [pc, #108]	; (80026c4 <HAL_TIM_Base_MspInit+0x198>)
 8002656:	f000 fc8f 	bl	8002f78 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_TIM_Base_MspInit+0x19c>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
 8002670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
 8002678:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <HAL_TIM_Base_MspInit+0x19c>)
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	6053      	str	r3, [r2, #4]
}
 800267e:	e010      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM4)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_TIM_Base_MspInit+0x1a0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10b      	bne.n	80026a2 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	61d3      	str	r3, [r2, #28]
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_TIM_Base_MspInit+0x184>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
}
 80026a2:	bf00      	nop
 80026a4:	3738      	adds	r7, #56	; 0x38
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	20002148 	.word	0x20002148
 80026b8:	4002001c 	.word	0x4002001c
 80026bc:	40010800 	.word	0x40010800
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40010c00 	.word	0x40010c00
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40000800 	.word	0x40000800

080026d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_TIM_MspPostInit+0x5c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d118      	bne.n	8002722 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_TIM_MspPostInit+0x60>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <HAL_TIM_MspPostInit+0x60>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_TIM_MspPostInit+0x60>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2302      	movs	r3, #2
 8002714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	4619      	mov	r1, r3
 800271c:	4805      	ldr	r0, [pc, #20]	; (8002734 <HAL_TIM_MspPostInit+0x64>)
 800271e:	f000 fc2b 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002722:	bf00      	nop
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40021000 	.word	0x40021000
 8002734:	40010800 	.word	0x40010800

08002738 <Reset_Handler>:
 8002738:	f7ff fca0 	bl	800207c <SystemInit>
 800273c:	480b      	ldr	r0, [pc, #44]	; (800276c <LoopFillZerobss+0xe>)
 800273e:	490c      	ldr	r1, [pc, #48]	; (8002770 <LoopFillZerobss+0x12>)
 8002740:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <LoopFillZerobss+0x16>)
 8002742:	2300      	movs	r3, #0
 8002744:	e002      	b.n	800274c <LoopCopyDataInit>

08002746 <CopyDataInit>:
 8002746:	58d4      	ldr	r4, [r2, r3]
 8002748:	50c4      	str	r4, [r0, r3]
 800274a:	3304      	adds	r3, #4

0800274c <LoopCopyDataInit>:
 800274c:	18c4      	adds	r4, r0, r3
 800274e:	428c      	cmp	r4, r1
 8002750:	d3f9      	bcc.n	8002746 <CopyDataInit>
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <LoopFillZerobss+0x1a>)
 8002754:	4c09      	ldr	r4, [pc, #36]	; (800277c <LoopFillZerobss+0x1e>)
 8002756:	2300      	movs	r3, #0
 8002758:	e001      	b.n	800275e <LoopFillZerobss>

0800275a <FillZerobss>:
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	3204      	adds	r2, #4

0800275e <LoopFillZerobss>:
 800275e:	42a2      	cmp	r2, r4
 8002760:	d3fb      	bcc.n	800275a <FillZerobss>
 8002762:	f004 f983 	bl	8006a6c <__libc_init_array>
 8002766:	f7ff f9ff 	bl	8001b68 <main>
 800276a:	4770      	bx	lr
 800276c:	20000000 	.word	0x20000000
 8002770:	2000000c 	.word	0x2000000c
 8002774:	08006ce8 	.word	0x08006ce8
 8002778:	2000000c 	.word	0x2000000c
 800277c:	20002190 	.word	0x20002190

08002780 <ADC1_2_IRQHandler>:
 8002780:	e7fe      	b.n	8002780 <ADC1_2_IRQHandler>
	...

08002784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_Init+0x28>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_Init+0x28>)
 800278e:	f043 0310 	orr.w	r3, r3, #16
 8002792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002794:	2003      	movs	r0, #3
 8002796:	f000 f947 	bl	8002a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279a:	200f      	movs	r0, #15
 800279c:	f000 f808 	bl	80027b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a0:	f7ff fc18 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40022000 	.word	0x40022000

080027b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_InitTick+0x54>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_InitTick+0x58>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f95f 	bl	8002a92 <HAL_SYSTICK_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e00e      	b.n	80027fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	d80a      	bhi.n	80027fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e4:	2200      	movs	r2, #0
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f000 f927 	bl	8002a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f0:	4a06      	ldr	r2, [pc, #24]	; (800280c <HAL_InitTick+0x5c>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e000      	b.n	80027fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000000 	.word	0x20000000
 8002808:	20000008 	.word	0x20000008
 800280c:	20000004 	.word	0x20000004

08002810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_IncTick+0x1c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_IncTick+0x20>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4413      	add	r3, r2
 8002820:	4a03      	ldr	r2, [pc, #12]	; (8002830 <HAL_IncTick+0x20>)
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	20000008 	.word	0x20000008
 8002830:	2000218c 	.word	0x2000218c

08002834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return uwTick;
 8002838:	4b02      	ldr	r3, [pc, #8]	; (8002844 <HAL_GetTick+0x10>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	2000218c 	.word	0x2000218c

08002848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002850:	f7ff fff0 	bl	8002834 <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d005      	beq.n	800286e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_Delay+0x44>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800286e:	bf00      	nop
 8002870:	f7ff ffe0 	bl	8002834 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	d8f7      	bhi.n	8002870 <HAL_Delay+0x28>
  {
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000008 	.word	0x20000008

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4906      	ldr	r1, [pc, #24]	; (8002928 <__NVIC_EnableIRQ+0x34>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	; (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	; (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f4:	d301      	bcc.n	80029fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00f      	b.n	8002a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <SysTick_Config+0x40>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a02:	210f      	movs	r1, #15
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f7ff ff90 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <SysTick_Config+0x40>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <SysTick_Config+0x40>)
 8002a14:	2207      	movs	r2, #7
 8002a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000e010 	.word	0xe000e010

08002a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ff2d 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a50:	f7ff ff42 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	6978      	ldr	r0, [r7, #20]
 8002a5c:	f7ff ff90 	bl	8002980 <NVIC_EncodePriority>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff5f 	bl	800292c <__NVIC_SetPriority>
}
 8002a6e:	bf00      	nop
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff35 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ffa2 	bl	80029e4 <SysTick_Config>
 8002aa0:	4603      	mov	r3, r0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e043      	b.n	8002b4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_DMA_Init+0xa8>)
 8002aca:	4413      	add	r3, r2
 8002acc:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <HAL_DMA_Init+0xac>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	009a      	lsls	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_DMA_Init+0xb0>)
 8002ade:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002af6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002afa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	bffdfff8 	.word	0xbffdfff8
 8002b58:	cccccccd 	.word	0xcccccccd
 8002b5c:	40020000 	.word	0x40020000

08002b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_DMA_Start_IT+0x20>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e04b      	b.n	8002c18 <HAL_DMA_Start_IT+0xb8>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d13a      	bne.n	8002c0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f9af 	bl	8002f1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 020e 	orr.w	r2, r2, #14
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e00f      	b.n	8002bf8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0204 	bic.w	r2, r2, #4
 8002be6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 020a 	orr.w	r2, r2, #10
 8002bf6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e005      	b.n	8002c16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
 8002c14:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d005      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	e051      	b.n	8002ce8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 020e 	bic.w	r2, r2, #14
 8002c52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a22      	ldr	r2, [pc, #136]	; (8002cf4 <HAL_DMA_Abort_IT+0xd4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d029      	beq.n	8002cc2 <HAL_DMA_Abort_IT+0xa2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <HAL_DMA_Abort_IT+0xd8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_Abort_IT+0x9e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <HAL_DMA_Abort_IT+0xdc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01a      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0x98>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <HAL_DMA_Abort_IT+0xe0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d012      	beq.n	8002cb2 <HAL_DMA_Abort_IT+0x92>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <HAL_DMA_Abort_IT+0xe4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00a      	beq.n	8002cac <HAL_DMA_Abort_IT+0x8c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1b      	ldr	r2, [pc, #108]	; (8002d08 <HAL_DMA_Abort_IT+0xe8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_DMA_Abort_IT+0x86>
 8002ca0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ca4:	e00e      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xa4>
 8002ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002caa:	e00b      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xa4>
 8002cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cb0:	e008      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xa4>
 8002cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb6:	e005      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xa4>
 8002cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cbc:	e002      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xa4>
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xa4>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <HAL_DMA_Abort_IT+0xec>)
 8002cc6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    } 
  }
  return status;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40020008 	.word	0x40020008
 8002cf8:	4002001c 	.word	0x4002001c
 8002cfc:	40020030 	.word	0x40020030
 8002d00:	40020044 	.word	0x40020044
 8002d04:	40020058 	.word	0x40020058
 8002d08:	4002006c 	.word	0x4002006c
 8002d0c:	40020000 	.word	0x40020000

08002d10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d04f      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0xc8>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d04a      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0204 	bic.w	r2, r2, #4
 8002d5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a66      	ldr	r2, [pc, #408]	; (8002f00 <HAL_DMA_IRQHandler+0x1f0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d029      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xae>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_DMA_IRQHandler+0x1f4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d022      	beq.n	8002dba <HAL_DMA_IRQHandler+0xaa>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a63      	ldr	r2, [pc, #396]	; (8002f08 <HAL_DMA_IRQHandler+0x1f8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01a      	beq.n	8002db4 <HAL_DMA_IRQHandler+0xa4>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a62      	ldr	r2, [pc, #392]	; (8002f0c <HAL_DMA_IRQHandler+0x1fc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d012      	beq.n	8002dae <HAL_DMA_IRQHandler+0x9e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a60      	ldr	r2, [pc, #384]	; (8002f10 <HAL_DMA_IRQHandler+0x200>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00a      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x98>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5f      	ldr	r2, [pc, #380]	; (8002f14 <HAL_DMA_IRQHandler+0x204>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d102      	bne.n	8002da2 <HAL_DMA_IRQHandler+0x92>
 8002d9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002da0:	e00e      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xb0>
 8002da2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002da6:	e00b      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xb0>
 8002da8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dac:	e008      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xb0>
 8002dae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002db2:	e005      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xb0>
 8002db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db8:	e002      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xb0>
 8002dba:	2340      	movs	r3, #64	; 0x40
 8002dbc:	e000      	b.n	8002dc0 <HAL_DMA_IRQHandler+0xb0>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	4a55      	ldr	r2, [pc, #340]	; (8002f18 <HAL_DMA_IRQHandler+0x208>)
 8002dc2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8094 	beq.w	8002ef6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002dd6:	e08e      	b.n	8002ef6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	2202      	movs	r2, #2
 8002dde:	409a      	lsls	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d056      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x186>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d051      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 020a 	bic.w	r2, r2, #10
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <HAL_DMA_IRQHandler+0x1f0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d029      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x166>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a37      	ldr	r2, [pc, #220]	; (8002f04 <HAL_DMA_IRQHandler+0x1f4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d022      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x162>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a35      	ldr	r2, [pc, #212]	; (8002f08 <HAL_DMA_IRQHandler+0x1f8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01a      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x15c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <HAL_DMA_IRQHandler+0x1fc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d012      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x156>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a32      	ldr	r2, [pc, #200]	; (8002f10 <HAL_DMA_IRQHandler+0x200>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00a      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x150>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <HAL_DMA_IRQHandler+0x204>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d102      	bne.n	8002e5a <HAL_DMA_IRQHandler+0x14a>
 8002e54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e58:	e00e      	b.n	8002e78 <HAL_DMA_IRQHandler+0x168>
 8002e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e5e:	e00b      	b.n	8002e78 <HAL_DMA_IRQHandler+0x168>
 8002e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e64:	e008      	b.n	8002e78 <HAL_DMA_IRQHandler+0x168>
 8002e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e6a:	e005      	b.n	8002e78 <HAL_DMA_IRQHandler+0x168>
 8002e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e70:	e002      	b.n	8002e78 <HAL_DMA_IRQHandler+0x168>
 8002e72:	2320      	movs	r3, #32
 8002e74:	e000      	b.n	8002e78 <HAL_DMA_IRQHandler+0x168>
 8002e76:	2302      	movs	r3, #2
 8002e78:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <HAL_DMA_IRQHandler+0x208>)
 8002e7a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d034      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e94:	e02f      	b.n	8002ef6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d028      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x1e8>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d023      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 020e 	bic.w	r2, r2, #14
 8002ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	2101      	movs	r1, #1
 8002eca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ece:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
    }
  }
  return;
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
}
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40020008 	.word	0x40020008
 8002f04:	4002001c 	.word	0x4002001c
 8002f08:	40020030 	.word	0x40020030
 8002f0c:	40020044 	.word	0x40020044
 8002f10:	40020058 	.word	0x40020058
 8002f14:	4002006c 	.word	0x4002006c
 8002f18:	40020000 	.word	0x40020000

08002f1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d108      	bne.n	8002f5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f5a:	e007      	b.n	8002f6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b08b      	sub	sp, #44	; 0x2c
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f86:	2300      	movs	r3, #0
 8002f88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8a:	e169      	b.n	8003260 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f040 8158 	bne.w	800325a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4a9a      	ldr	r2, [pc, #616]	; (8003218 <HAL_GPIO_Init+0x2a0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d05e      	beq.n	8003072 <HAL_GPIO_Init+0xfa>
 8002fb4:	4a98      	ldr	r2, [pc, #608]	; (8003218 <HAL_GPIO_Init+0x2a0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d875      	bhi.n	80030a6 <HAL_GPIO_Init+0x12e>
 8002fba:	4a98      	ldr	r2, [pc, #608]	; (800321c <HAL_GPIO_Init+0x2a4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d058      	beq.n	8003072 <HAL_GPIO_Init+0xfa>
 8002fc0:	4a96      	ldr	r2, [pc, #600]	; (800321c <HAL_GPIO_Init+0x2a4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d86f      	bhi.n	80030a6 <HAL_GPIO_Init+0x12e>
 8002fc6:	4a96      	ldr	r2, [pc, #600]	; (8003220 <HAL_GPIO_Init+0x2a8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d052      	beq.n	8003072 <HAL_GPIO_Init+0xfa>
 8002fcc:	4a94      	ldr	r2, [pc, #592]	; (8003220 <HAL_GPIO_Init+0x2a8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d869      	bhi.n	80030a6 <HAL_GPIO_Init+0x12e>
 8002fd2:	4a94      	ldr	r2, [pc, #592]	; (8003224 <HAL_GPIO_Init+0x2ac>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d04c      	beq.n	8003072 <HAL_GPIO_Init+0xfa>
 8002fd8:	4a92      	ldr	r2, [pc, #584]	; (8003224 <HAL_GPIO_Init+0x2ac>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d863      	bhi.n	80030a6 <HAL_GPIO_Init+0x12e>
 8002fde:	4a92      	ldr	r2, [pc, #584]	; (8003228 <HAL_GPIO_Init+0x2b0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d046      	beq.n	8003072 <HAL_GPIO_Init+0xfa>
 8002fe4:	4a90      	ldr	r2, [pc, #576]	; (8003228 <HAL_GPIO_Init+0x2b0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d85d      	bhi.n	80030a6 <HAL_GPIO_Init+0x12e>
 8002fea:	2b12      	cmp	r3, #18
 8002fec:	d82a      	bhi.n	8003044 <HAL_GPIO_Init+0xcc>
 8002fee:	2b12      	cmp	r3, #18
 8002ff0:	d859      	bhi.n	80030a6 <HAL_GPIO_Init+0x12e>
 8002ff2:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_GPIO_Init+0x80>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	08003073 	.word	0x08003073
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	0800305f 	.word	0x0800305f
 8003004:	080030a1 	.word	0x080030a1
 8003008:	080030a7 	.word	0x080030a7
 800300c:	080030a7 	.word	0x080030a7
 8003010:	080030a7 	.word	0x080030a7
 8003014:	080030a7 	.word	0x080030a7
 8003018:	080030a7 	.word	0x080030a7
 800301c:	080030a7 	.word	0x080030a7
 8003020:	080030a7 	.word	0x080030a7
 8003024:	080030a7 	.word	0x080030a7
 8003028:	080030a7 	.word	0x080030a7
 800302c:	080030a7 	.word	0x080030a7
 8003030:	080030a7 	.word	0x080030a7
 8003034:	080030a7 	.word	0x080030a7
 8003038:	080030a7 	.word	0x080030a7
 800303c:	08003055 	.word	0x08003055
 8003040:	08003069 	.word	0x08003069
 8003044:	4a79      	ldr	r2, [pc, #484]	; (800322c <HAL_GPIO_Init+0x2b4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800304a:	e02c      	b.n	80030a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	623b      	str	r3, [r7, #32]
          break;
 8003052:	e029      	b.n	80030a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	3304      	adds	r3, #4
 800305a:	623b      	str	r3, [r7, #32]
          break;
 800305c:	e024      	b.n	80030a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	3308      	adds	r3, #8
 8003064:	623b      	str	r3, [r7, #32]
          break;
 8003066:	e01f      	b.n	80030a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	330c      	adds	r3, #12
 800306e:	623b      	str	r3, [r7, #32]
          break;
 8003070:	e01a      	b.n	80030a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800307a:	2304      	movs	r3, #4
 800307c:	623b      	str	r3, [r7, #32]
          break;
 800307e:	e013      	b.n	80030a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003088:	2308      	movs	r3, #8
 800308a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	611a      	str	r2, [r3, #16]
          break;
 8003092:	e009      	b.n	80030a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003094:	2308      	movs	r3, #8
 8003096:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	615a      	str	r2, [r3, #20]
          break;
 800309e:	e003      	b.n	80030a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030a0:	2300      	movs	r3, #0
 80030a2:	623b      	str	r3, [r7, #32]
          break;
 80030a4:	e000      	b.n	80030a8 <HAL_GPIO_Init+0x130>
          break;
 80030a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d801      	bhi.n	80030b2 <HAL_GPIO_Init+0x13a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	e001      	b.n	80030b6 <HAL_GPIO_Init+0x13e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2bff      	cmp	r3, #255	; 0xff
 80030bc:	d802      	bhi.n	80030c4 <HAL_GPIO_Init+0x14c>
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	e002      	b.n	80030ca <HAL_GPIO_Init+0x152>
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	3b08      	subs	r3, #8
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	210f      	movs	r1, #15
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	401a      	ands	r2, r3
 80030dc:	6a39      	ldr	r1, [r7, #32]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	431a      	orrs	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80b1 	beq.w	800325a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030f8:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <HAL_GPIO_Init+0x2b8>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <HAL_GPIO_Init+0x2b8>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6193      	str	r3, [r2, #24]
 8003104:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_GPIO_Init+0x2b8>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003110:	4a48      	ldr	r2, [pc, #288]	; (8003234 <HAL_GPIO_Init+0x2bc>)
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a40      	ldr	r2, [pc, #256]	; (8003238 <HAL_GPIO_Init+0x2c0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_GPIO_Init+0x1ec>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3f      	ldr	r2, [pc, #252]	; (800323c <HAL_GPIO_Init+0x2c4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00d      	beq.n	8003160 <HAL_GPIO_Init+0x1e8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3e      	ldr	r2, [pc, #248]	; (8003240 <HAL_GPIO_Init+0x2c8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d007      	beq.n	800315c <HAL_GPIO_Init+0x1e4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <HAL_GPIO_Init+0x2cc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_GPIO_Init+0x1e0>
 8003154:	2303      	movs	r3, #3
 8003156:	e006      	b.n	8003166 <HAL_GPIO_Init+0x1ee>
 8003158:	2304      	movs	r3, #4
 800315a:	e004      	b.n	8003166 <HAL_GPIO_Init+0x1ee>
 800315c:	2302      	movs	r3, #2
 800315e:	e002      	b.n	8003166 <HAL_GPIO_Init+0x1ee>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_GPIO_Init+0x1ee>
 8003164:	2300      	movs	r3, #0
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	f002 0203 	and.w	r2, r2, #3
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	4093      	lsls	r3, r2
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003176:	492f      	ldr	r1, [pc, #188]	; (8003234 <HAL_GPIO_Init+0x2bc>)
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	492c      	ldr	r1, [pc, #176]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4928      	ldr	r1, [pc, #160]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031b8:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	4922      	ldr	r1, [pc, #136]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60cb      	str	r3, [r1, #12]
 80031c4:	e006      	b.n	80031d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	491e      	ldr	r1, [pc, #120]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4918      	ldr	r1, [pc, #96]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	4914      	ldr	r1, [pc, #80]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d021      	beq.n	800324c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <HAL_GPIO_Init+0x2d0>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	e021      	b.n	800325a <HAL_GPIO_Init+0x2e2>
 8003216:	bf00      	nop
 8003218:	10320000 	.word	0x10320000
 800321c:	10310000 	.word	0x10310000
 8003220:	10220000 	.word	0x10220000
 8003224:	10210000 	.word	0x10210000
 8003228:	10120000 	.word	0x10120000
 800322c:	10110000 	.word	0x10110000
 8003230:	40021000 	.word	0x40021000
 8003234:	40010000 	.word	0x40010000
 8003238:	40010800 	.word	0x40010800
 800323c:	40010c00 	.word	0x40010c00
 8003240:	40011000 	.word	0x40011000
 8003244:	40011400 	.word	0x40011400
 8003248:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_GPIO_Init+0x304>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	43db      	mvns	r3, r3
 8003254:	4909      	ldr	r1, [pc, #36]	; (800327c <HAL_GPIO_Init+0x304>)
 8003256:	4013      	ands	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	3301      	adds	r3, #1
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	f47f ae8e 	bne.w	8002f8c <HAL_GPIO_Init+0x14>
  }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	372c      	adds	r7, #44	; 0x2c
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	40010400 	.word	0x40010400

08003280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
 800328c:	4613      	mov	r3, r2
 800328e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003290:	787b      	ldrb	r3, [r7, #1]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800329c:	e003      	b.n	80032a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800329e:	887b      	ldrh	r3, [r7, #2]
 80032a0:	041a      	lsls	r2, r3, #16
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e272      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8087 	beq.w	80033de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	4b92      	ldr	r3, [pc, #584]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d00c      	beq.n	80032f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032dc:	4b8f      	ldr	r3, [pc, #572]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d112      	bne.n	800330e <HAL_RCC_OscConfig+0x5e>
 80032e8:	4b8c      	ldr	r3, [pc, #560]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d10b      	bne.n	800330e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f6:	4b89      	ldr	r3, [pc, #548]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d06c      	beq.n	80033dc <HAL_RCC_OscConfig+0x12c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d168      	bne.n	80033dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e24c      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x76>
 8003318:	4b80      	ldr	r3, [pc, #512]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a7f      	ldr	r2, [pc, #508]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e02e      	b.n	8003384 <HAL_RCC_OscConfig+0xd4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x98>
 800332e:	4b7b      	ldr	r3, [pc, #492]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a7a      	ldr	r2, [pc, #488]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b78      	ldr	r3, [pc, #480]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a77      	ldr	r2, [pc, #476]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e01d      	b.n	8003384 <HAL_RCC_OscConfig+0xd4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0xbc>
 8003352:	4b72      	ldr	r3, [pc, #456]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a71      	ldr	r2, [pc, #452]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6e      	ldr	r2, [pc, #440]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0xd4>
 800336c:	4b6b      	ldr	r3, [pc, #428]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a6a      	ldr	r2, [pc, #424]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b68      	ldr	r3, [pc, #416]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a67      	ldr	r2, [pc, #412]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800337e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003382:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7ff fa52 	bl	8002834 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7ff fa4e 	bl	8002834 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e200      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	4b5d      	ldr	r3, [pc, #372]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0xe4>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7ff fa3e 	bl	8002834 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7ff fa3a 	bl	8002834 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e1ec      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x10c>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d063      	beq.n	80034b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ea:	4b4c      	ldr	r3, [pc, #304]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033f6:	4b49      	ldr	r3, [pc, #292]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d11c      	bne.n	800343c <HAL_RCC_OscConfig+0x18c>
 8003402:	4b46      	ldr	r3, [pc, #280]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d116      	bne.n	800343c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	4b43      	ldr	r3, [pc, #268]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_RCC_OscConfig+0x176>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e1c0      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4939      	ldr	r1, [pc, #228]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	e03a      	b.n	80034b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003444:	4b36      	ldr	r3, [pc, #216]	; (8003520 <HAL_RCC_OscConfig+0x270>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7ff f9f3 	bl	8002834 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003452:	f7ff f9ef 	bl	8002834 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1a1      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003470:	4b2a      	ldr	r3, [pc, #168]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4927      	ldr	r1, [pc, #156]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
 8003484:	e015      	b.n	80034b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <HAL_RCC_OscConfig+0x270>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7ff f9d2 	bl	8002834 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003494:	f7ff f9ce 	bl	8002834 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e180      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d03a      	beq.n	8003534 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d019      	beq.n	80034fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7ff f9b2 	bl	8002834 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7ff f9ae 	bl	8002834 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e160      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f000 fa9c 	bl	8003a30 <RCC_Delay>
 80034f8:	e01c      	b.n	8003534 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7ff f998 	bl	8002834 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003506:	e00f      	b.n	8003528 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7ff f994 	bl	8002834 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d908      	bls.n	8003528 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e146      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	42420000 	.word	0x42420000
 8003524:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e9      	bne.n	8003508 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a6 	beq.w	800368e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003546:	4b8b      	ldr	r3, [pc, #556]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	4a87      	ldr	r2, [pc, #540]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	61d3      	str	r3, [r2, #28]
 800355e:	4b85      	ldr	r3, [pc, #532]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b82      	ldr	r3, [pc, #520]	; (8003778 <HAL_RCC_OscConfig+0x4c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b7f      	ldr	r3, [pc, #508]	; (8003778 <HAL_RCC_OscConfig+0x4c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7e      	ldr	r2, [pc, #504]	; (8003778 <HAL_RCC_OscConfig+0x4c8>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7ff f955 	bl	8002834 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7ff f951 	bl	8002834 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	; 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e103      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b75      	ldr	r3, [pc, #468]	; (8003778 <HAL_RCC_OscConfig+0x4c8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x312>
 80035b4:	4b6f      	ldr	r3, [pc, #444]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a6e      	ldr	r2, [pc, #440]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6213      	str	r3, [r2, #32]
 80035c0:	e02d      	b.n	800361e <HAL_RCC_OscConfig+0x36e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x334>
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	4a69      	ldr	r2, [pc, #420]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6213      	str	r3, [r2, #32]
 80035d6:	4b67      	ldr	r3, [pc, #412]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	4a66      	ldr	r2, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	f023 0304 	bic.w	r3, r3, #4
 80035e0:	6213      	str	r3, [r2, #32]
 80035e2:	e01c      	b.n	800361e <HAL_RCC_OscConfig+0x36e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d10c      	bne.n	8003606 <HAL_RCC_OscConfig+0x356>
 80035ec:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4a60      	ldr	r2, [pc, #384]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	f043 0304 	orr.w	r3, r3, #4
 80035f6:	6213      	str	r3, [r2, #32]
 80035f8:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6213      	str	r3, [r2, #32]
 8003604:	e00b      	b.n	800361e <HAL_RCC_OscConfig+0x36e>
 8003606:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	4a5a      	ldr	r2, [pc, #360]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	6213      	str	r3, [r2, #32]
 8003612:	4b58      	ldr	r3, [pc, #352]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	4a57      	ldr	r2, [pc, #348]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	f023 0304 	bic.w	r3, r3, #4
 800361c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d015      	beq.n	8003652 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7ff f905 	bl	8002834 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7ff f901 	bl	8002834 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0b1      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ee      	beq.n	800362e <HAL_RCC_OscConfig+0x37e>
 8003650:	e014      	b.n	800367c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7ff f8ef 	bl	8002834 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7ff f8eb 	bl	8002834 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e09b      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	4b40      	ldr	r3, [pc, #256]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ee      	bne.n	800365a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003682:	4b3c      	ldr	r3, [pc, #240]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a3b      	ldr	r2, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8087 	beq.w	80037a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003698:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d061      	beq.n	8003768 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d146      	bne.n	800373a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ac:	4b33      	ldr	r3, [pc, #204]	; (800377c <HAL_RCC_OscConfig+0x4cc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7ff f8bf 	bl	8002834 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7ff f8bb 	bl	8002834 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e06d      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036cc:	4b29      	ldr	r3, [pc, #164]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f0      	bne.n	80036ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d108      	bne.n	80036f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4921      	ldr	r1, [pc, #132]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f4:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a19      	ldr	r1, [r3, #32]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	430b      	orrs	r3, r1
 8003706:	491b      	ldr	r1, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x4cc>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7ff f88f 	bl	8002834 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7ff f88b 	bl	8002834 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e03d      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x46a>
 8003738:	e035      	b.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_OscConfig+0x4cc>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7ff f878 	bl	8002834 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7ff f874 	bl	8002834 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e026      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x498>
 8003766:	e01e      	b.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e019      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
 800377c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_OscConfig+0x500>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	429a      	cmp	r2, r3
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d0      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d910      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b67      	ldr	r3, [pc, #412]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	4965      	ldr	r1, [pc, #404]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b63      	ldr	r3, [pc, #396]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0b8      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a58      	ldr	r2, [pc, #352]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800381a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003832:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	494d      	ldr	r1, [pc, #308]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d040      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d115      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07f      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e073      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003882:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e06b      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4936      	ldr	r1, [pc, #216]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a4:	f7fe ffc6 	bl	8002834 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fe ffc2 	bl	8002834 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e053      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d210      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 0207 	bic.w	r2, r3, #7
 80038ea:	4922      	ldr	r1, [pc, #136]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e032      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4916      	ldr	r1, [pc, #88]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490e      	ldr	r1, [pc, #56]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003942:	f000 f821 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8003946:	4602      	mov	r2, r0
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	490a      	ldr	r1, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	5ccb      	ldrb	r3, [r1, r3]
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_RCC_ClockConfig+0x1cc>)
 800395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1d0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe ff24 	bl	80027b0 <HAL_InitTick>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40022000 	.word	0x40022000
 8003978:	40021000 	.word	0x40021000
 800397c:	08006ae0 	.word	0x08006ae0
 8003980:	20000000 	.word	0x20000000
 8003984:	20000004 	.word	0x20000004

08003988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x94>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d002      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x30>
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d003      	beq.n	80039be <HAL_RCC_GetSysClockFreq+0x36>
 80039b6:	e027      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ba:	613b      	str	r3, [r7, #16]
      break;
 80039bc:	e027      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	0c9b      	lsrs	r3, r3, #18
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d010      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x94>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	0c5b      	lsrs	r3, r3, #17
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a0d      	ldr	r2, [pc, #52]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ea:	fb03 f202 	mul.w	r2, r3, r2
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e004      	b.n	8003a02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0c      	ldr	r2, [pc, #48]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xa4>)
 80039fc:	fb02 f303 	mul.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	613b      	str	r3, [r7, #16]
      break;
 8003a06:	e002      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a0a:	613b      	str	r3, [r7, #16]
      break;
 8003a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0e:	693b      	ldr	r3, [r7, #16]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	007a1200 	.word	0x007a1200
 8003a24:	08006af0 	.word	0x08006af0
 8003a28:	08006b00 	.word	0x08006b00
 8003a2c:	003d0900 	.word	0x003d0900

08003a30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <RCC_Delay+0x34>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <RCC_Delay+0x38>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0a5b      	lsrs	r3, r3, #9
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a4c:	bf00      	nop
  }
  while (Delay --);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	60fa      	str	r2, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f9      	bne.n	8003a4c <RCC_Delay+0x1c>
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	20000000 	.word	0x20000000
 8003a68:	10624dd3 	.word	0x10624dd3

08003a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e041      	b.n	8003b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fe fd4a 	bl	800252c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f001 f8ca 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e041      	b.n	8003ba0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f839 	bl	8003ba8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f001 f87b 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_TIM_OC_Start+0x24>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e022      	b.n	8003c26 <HAL_TIM_OC_Start+0x6a>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d109      	bne.n	8003bfa <HAL_TIM_OC_Start+0x3e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	bf14      	ite	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	2300      	moveq	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e015      	b.n	8003c26 <HAL_TIM_OC_Start+0x6a>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d109      	bne.n	8003c14 <HAL_TIM_OC_Start+0x58>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e008      	b.n	8003c26 <HAL_TIM_OC_Start+0x6a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e05e      	b.n	8003cec <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <HAL_TIM_OC_Start+0x82>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c3c:	e013      	b.n	8003c66 <HAL_TIM_OC_Start+0xaa>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_OC_Start+0x92>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c4c:	e00b      	b.n	8003c66 <HAL_TIM_OC_Start+0xaa>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_OC_Start+0xa2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5c:	e003      	b.n	8003c66 <HAL_TIM_OC_Start+0xaa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 fc07 	bl	8005482 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <HAL_TIM_OC_Start+0x138>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d107      	bne.n	8003c8e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <HAL_TIM_OC_Start+0x138>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_TIM_OC_Start+0xfa>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca0:	d009      	beq.n	8003cb6 <HAL_TIM_OC_Start+0xfa>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <HAL_TIM_OC_Start+0x13c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIM_OC_Start+0xfa>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <HAL_TIM_OC_Start+0x140>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d111      	bne.n	8003cda <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d010      	beq.n	8003cea <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd8:	e007      	b.n	8003cea <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800

08003d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e041      	b.n	8003d96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f839 	bl	8003d9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f000 ff80 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_TIM_PWM_Start_DMA+0x2c>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e022      	b.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x72>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d109      	bne.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x46>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e015      	b.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x72>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start_DMA+0x60>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e008      	b.n	8003e22 <HAL_TIM_PWM_Start_DMA+0x72>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
 8003e28:	e153      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start_DMA+0x94>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e022      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0xda>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d109      	bne.n	8003e5e <HAL_TIM_PWM_Start_DMA+0xae>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	bf0c      	ite	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	2300      	movne	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e015      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0xda>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d109      	bne.n	8003e78 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e008      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0xda>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d024      	beq.n	8003ed8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_TIM_PWM_Start_DMA+0xea>
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e119      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start_DMA+0xfe>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eac:	e016      	b.n	8003edc <HAL_TIM_PWM_Start_DMA+0x12c>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Start_DMA+0x10e>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ebc:	e00e      	b.n	8003edc <HAL_TIM_PWM_Start_DMA+0x12c>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_PWM_Start_DMA+0x11e>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ecc:	e006      	b.n	8003edc <HAL_TIM_PWM_Start_DMA+0x12c>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ed6:	e001      	b.n	8003edc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0fa      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	f200 80ae 	bhi.w	8004040 <HAL_TIM_PWM_Start_DMA+0x290>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08004041 	.word	0x08004041
 8003ef4:	08004041 	.word	0x08004041
 8003ef8:	08004041 	.word	0x08004041
 8003efc:	08003f69 	.word	0x08003f69
 8003f00:	08004041 	.word	0x08004041
 8003f04:	08004041 	.word	0x08004041
 8003f08:	08004041 	.word	0x08004041
 8003f0c:	08003fb1 	.word	0x08003fb1
 8003f10:	08004041 	.word	0x08004041
 8003f14:	08004041 	.word	0x08004041
 8003f18:	08004041 	.word	0x08004041
 8003f1c:	08003ff9 	.word	0x08003ff9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	4a6d      	ldr	r2, [pc, #436]	; (80040dc <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	4a6c      	ldr	r2, [pc, #432]	; (80040e0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	4a6b      	ldr	r2, [pc, #428]	; (80040e4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3334      	adds	r3, #52	; 0x34
 8003f44:	461a      	mov	r2, r3
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	f7fe fe0a 	bl	8002b60 <HAL_DMA_Start_IT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0bd      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f64:	60da      	str	r2, [r3, #12]
      break;
 8003f66:	e06e      	b.n	8004046 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	4a5b      	ldr	r2, [pc, #364]	; (80040dc <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	4a5a      	ldr	r2, [pc, #360]	; (80040e0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	4a59      	ldr	r2, [pc, #356]	; (80040e4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3338      	adds	r3, #56	; 0x38
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	f7fe fde6 	bl	8002b60 <HAL_DMA_Start_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e099      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fac:	60da      	str	r2, [r3, #12]
      break;
 8003fae:	e04a      	b.n	8004046 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	4a49      	ldr	r2, [pc, #292]	; (80040dc <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4a48      	ldr	r2, [pc, #288]	; (80040e0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	4a47      	ldr	r2, [pc, #284]	; (80040e4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	333c      	adds	r3, #60	; 0x3c
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	f7fe fdc2 	bl	8002b60 <HAL_DMA_Start_IT>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e075      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff4:	60da      	str	r2, [r3, #12]
      break;
 8003ff6:	e026      	b.n	8004046 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	4a37      	ldr	r2, [pc, #220]	; (80040dc <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	4a36      	ldr	r2, [pc, #216]	; (80040e0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	4a35      	ldr	r2, [pc, #212]	; (80040e4 <HAL_TIM_PWM_Start_DMA+0x334>)
 800400e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3340      	adds	r3, #64	; 0x40
 800401c:	461a      	mov	r2, r3
 800401e:	887b      	ldrh	r3, [r7, #2]
 8004020:	f7fe fd9e 	bl	8002b60 <HAL_DMA_Start_IT>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e051      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800403c:	60da      	str	r2, [r3, #12]
      break;
 800403e:	e002      	b.n	8004046 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	75fb      	strb	r3, [r7, #23]
      break;
 8004044:	bf00      	nop
  }

  if (status == HAL_OK)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d141      	bne.n	80040d0 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2201      	movs	r2, #1
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fa14 	bl	8005482 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d107      	bne.n	8004074 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <HAL_TIM_PWM_Start_DMA+0x338>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d009      	beq.n	800409c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_TIM_PWM_Start_DMA+0x33c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d111      	bne.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d010      	beq.n	80040d0 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	e007      	b.n	80040d0 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	08004b35 	.word	0x08004b35
 80040e0:	08004bdd 	.word	0x08004bdd
 80040e4:	08004aa3 	.word	0x08004aa3
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800

080040f4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d855      	bhi.n	80041b4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004145 	.word	0x08004145
 8004114:	080041b5 	.word	0x080041b5
 8004118:	080041b5 	.word	0x080041b5
 800411c:	080041b5 	.word	0x080041b5
 8004120:	08004161 	.word	0x08004161
 8004124:	080041b5 	.word	0x080041b5
 8004128:	080041b5 	.word	0x080041b5
 800412c:	080041b5 	.word	0x080041b5
 8004130:	0800417d 	.word	0x0800417d
 8004134:	080041b5 	.word	0x080041b5
 8004138:	080041b5 	.word	0x080041b5
 800413c:	080041b5 	.word	0x080041b5
 8004140:	08004199 	.word	0x08004199
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004152:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fd61 	bl	8002c20 <HAL_DMA_Abort_IT>
      break;
 800415e:	e02c      	b.n	80041ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe fd53 	bl	8002c20 <HAL_DMA_Abort_IT>
      break;
 800417a:	e01e      	b.n	80041ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800418a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	4618      	mov	r0, r3
 8004192:	f7fe fd45 	bl	8002c20 <HAL_DMA_Abort_IT>
      break;
 8004196:	e010      	b.n	80041ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fd37 	bl	8002c20 <HAL_DMA_Abort_IT>
      break;
 80041b2:	e002      	b.n	80041ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d157      	bne.n	8004270 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 f95a 	bl	8005482 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2a      	ldr	r2, [pc, #168]	; (800427c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d117      	bne.n	8004208 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6a1a      	ldr	r2, [r3, #32]
 80041de:	f241 1311 	movw	r3, #4369	; 0x1111
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10f      	bne.n	8004208 <HAL_TIM_PWM_Stop_DMA+0x114>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	f240 4344 	movw	r3, #1092	; 0x444
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_PWM_Stop_DMA+0x114>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004206:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10f      	bne.n	8004238 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a1a      	ldr	r2, [r3, #32]
 800421e:	f240 4344 	movw	r3, #1092	; 0x444
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d107      	bne.n	8004238 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <HAL_TIM_PWM_Stop_DMA+0x154>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004246:	e013      	b.n	8004270 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b04      	cmp	r3, #4
 800424c:	d104      	bne.n	8004258 <HAL_TIM_PWM_Stop_DMA+0x164>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004256:	e00b      	b.n	8004270 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b08      	cmp	r3, #8
 800425c:	d104      	bne.n	8004268 <HAL_TIM_PWM_Stop_DMA+0x174>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004266:	e003      	b.n	8004270 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00

08004280 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e041      	b.n	8004316 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f839 	bl	800431e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 fcc0 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <HAL_TIM_IC_Start+0x1a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004346:	b2db      	uxtb	r3, r3
 8004348:	e013      	b.n	8004372 <HAL_TIM_IC_Start+0x42>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d104      	bne.n	800435a <HAL_TIM_IC_Start+0x2a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004356:	b2db      	uxtb	r3, r3
 8004358:	e00b      	b.n	8004372 <HAL_TIM_IC_Start+0x42>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b08      	cmp	r3, #8
 800435e:	d104      	bne.n	800436a <HAL_TIM_IC_Start+0x3a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004366:	b2db      	uxtb	r3, r3
 8004368:	e003      	b.n	8004372 <HAL_TIM_IC_Start+0x42>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004370:	b2db      	uxtb	r3, r3
 8004372:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_TIM_IC_Start+0x54>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e013      	b.n	80043ac <HAL_TIM_IC_Start+0x7c>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d104      	bne.n	8004394 <HAL_TIM_IC_Start+0x64>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e00b      	b.n	80043ac <HAL_TIM_IC_Start+0x7c>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d104      	bne.n	80043a4 <HAL_TIM_IC_Start+0x74>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e003      	b.n	80043ac <HAL_TIM_IC_Start+0x7c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d102      	bne.n	80043ba <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043b4:	7bbb      	ldrb	r3, [r7, #14]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d001      	beq.n	80043be <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06d      	b.n	800449a <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_IC_Start+0x9e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	e013      	b.n	80043f6 <HAL_TIM_IC_Start+0xc6>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d104      	bne.n	80043de <HAL_TIM_IC_Start+0xae>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043dc:	e00b      	b.n	80043f6 <HAL_TIM_IC_Start+0xc6>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_IC_Start+0xbe>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ec:	e003      	b.n	80043f6 <HAL_TIM_IC_Start+0xc6>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_IC_Start+0xd6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004404:	e013      	b.n	800442e <HAL_TIM_IC_Start+0xfe>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d104      	bne.n	8004416 <HAL_TIM_IC_Start+0xe6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004414:	e00b      	b.n	800442e <HAL_TIM_IC_Start+0xfe>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d104      	bne.n	8004426 <HAL_TIM_IC_Start+0xf6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004424:	e003      	b.n	800442e <HAL_TIM_IC_Start+0xfe>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2201      	movs	r2, #1
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f823 	bl	8005482 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <HAL_TIM_IC_Start+0x174>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00e      	beq.n	8004464 <HAL_TIM_IC_Start+0x134>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444e:	d009      	beq.n	8004464 <HAL_TIM_IC_Start+0x134>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <HAL_TIM_IC_Start+0x178>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_TIM_IC_Start+0x134>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a13      	ldr	r2, [pc, #76]	; (80044ac <HAL_TIM_IC_Start+0x17c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d111      	bne.n	8004488 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b06      	cmp	r3, #6
 8004474:	d010      	beq.n	8004498 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004486:	e007      	b.n	8004498 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800

080044b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_OC_ConfigChannel+0x1e>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e048      	b.n	8004560 <HAL_TIM_OC_ConfigChannel+0xb0>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d839      	bhi.n	8004550 <HAL_TIM_OC_ConfigChannel+0xa0>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004519 	.word	0x08004519
 80044e8:	08004551 	.word	0x08004551
 80044ec:	08004551 	.word	0x08004551
 80044f0:	08004551 	.word	0x08004551
 80044f4:	08004527 	.word	0x08004527
 80044f8:	08004551 	.word	0x08004551
 80044fc:	08004551 	.word	0x08004551
 8004500:	08004551 	.word	0x08004551
 8004504:	08004535 	.word	0x08004535
 8004508:	08004551 	.word	0x08004551
 800450c:	08004551 	.word	0x08004551
 8004510:	08004551 	.word	0x08004551
 8004514:	08004543 	.word	0x08004543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fbf2 	bl	8004d08 <TIM_OC1_SetConfig>
      break;
 8004524:	e017      	b.n	8004556 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fc51 	bl	8004dd4 <TIM_OC2_SetConfig>
      break;
 8004532:	e010      	b.n	8004556 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fcb4 	bl	8004ea8 <TIM_OC3_SetConfig>
      break;
 8004540:	e009      	b.n	8004556 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fd17 	bl	8004f7c <TIM_OC4_SetConfig>
      break;
 800454e:	e002      	b.n	8004556 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
      break;
 8004554:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004582:	2302      	movs	r3, #2
 8004584:	e088      	b.n	8004698 <HAL_TIM_IC_ConfigChannel+0x130>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11b      	bne.n	80045cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f000 fdca 	bl	800513c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 020c 	bic.w	r2, r2, #12
 80045b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6999      	ldr	r1, [r3, #24]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	619a      	str	r2, [r3, #24]
 80045ca:	e060      	b.n	800468e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d11c      	bne.n	800460c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f000 fe33 	bl	800524c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699a      	ldr	r2, [r3, #24]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6999      	ldr	r1, [r3, #24]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	021a      	lsls	r2, r3, #8
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	619a      	str	r2, [r3, #24]
 800460a:	e040      	b.n	800468e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b08      	cmp	r3, #8
 8004610:	d11b      	bne.n	800464a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f000 fe7e 	bl	8005322 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 020c 	bic.w	r2, r2, #12
 8004634:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69d9      	ldr	r1, [r3, #28]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	61da      	str	r2, [r3, #28]
 8004648:	e021      	b.n	800468e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b0c      	cmp	r3, #12
 800464e:	d11c      	bne.n	800468a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	6819      	ldr	r1, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f000 fe9a 	bl	8005398 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004672:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69d9      	ldr	r1, [r3, #28]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	021a      	lsls	r2, r3, #8
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	61da      	str	r2, [r3, #28]
 8004688:	e001      	b.n	800468e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e0ae      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	f200 809f 	bhi.w	800480c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	08004709 	.word	0x08004709
 80046d8:	0800480d 	.word	0x0800480d
 80046dc:	0800480d 	.word	0x0800480d
 80046e0:	0800480d 	.word	0x0800480d
 80046e4:	08004749 	.word	0x08004749
 80046e8:	0800480d 	.word	0x0800480d
 80046ec:	0800480d 	.word	0x0800480d
 80046f0:	0800480d 	.word	0x0800480d
 80046f4:	0800478b 	.word	0x0800478b
 80046f8:	0800480d 	.word	0x0800480d
 80046fc:	0800480d 	.word	0x0800480d
 8004700:	0800480d 	.word	0x0800480d
 8004704:	080047cb 	.word	0x080047cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fafa 	bl	8004d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0208 	orr.w	r2, r2, #8
 8004722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0204 	bic.w	r2, r2, #4
 8004732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6999      	ldr	r1, [r3, #24]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	619a      	str	r2, [r3, #24]
      break;
 8004746:	e064      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fb40 	bl	8004dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6999      	ldr	r1, [r3, #24]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	021a      	lsls	r2, r3, #8
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	619a      	str	r2, [r3, #24]
      break;
 8004788:	e043      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fb89 	bl	8004ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0208 	orr.w	r2, r2, #8
 80047a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0204 	bic.w	r2, r2, #4
 80047b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69d9      	ldr	r1, [r3, #28]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	61da      	str	r2, [r3, #28]
      break;
 80047c8:	e023      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fbd3 	bl	8004f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69d9      	ldr	r1, [r3, #28]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	021a      	lsls	r2, r3, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	61da      	str	r2, [r3, #28]
      break;
 800480a:	e002      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
      break;
 8004810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800481a:	7dfb      	ldrb	r3, [r7, #23]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_TIM_ConfigClockSource+0x1c>
 800483c:	2302      	movs	r3, #2
 800483e:	e0b4      	b.n	80049aa <HAL_TIM_ConfigClockSource+0x186>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800485e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004878:	d03e      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0xd4>
 800487a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487e:	f200 8087 	bhi.w	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004886:	f000 8086 	beq.w	8004996 <HAL_TIM_ConfigClockSource+0x172>
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488e:	d87f      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 8004890:	2b70      	cmp	r3, #112	; 0x70
 8004892:	d01a      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0xa6>
 8004894:	2b70      	cmp	r3, #112	; 0x70
 8004896:	d87b      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 8004898:	2b60      	cmp	r3, #96	; 0x60
 800489a:	d050      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x11a>
 800489c:	2b60      	cmp	r3, #96	; 0x60
 800489e:	d877      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048a0:	2b50      	cmp	r3, #80	; 0x50
 80048a2:	d03c      	beq.n	800491e <HAL_TIM_ConfigClockSource+0xfa>
 80048a4:	2b50      	cmp	r3, #80	; 0x50
 80048a6:	d873      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048a8:	2b40      	cmp	r3, #64	; 0x40
 80048aa:	d058      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x13a>
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d86f      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b30      	cmp	r3, #48	; 0x30
 80048b2:	d064      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x15a>
 80048b4:	2b30      	cmp	r3, #48	; 0x30
 80048b6:	d86b      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d060      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x15a>
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d867      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d05c      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x15a>
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d05a      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x15a>
 80048c8:	e062      	b.n	8004990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6899      	ldr	r1, [r3, #8]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f000 fdb3 	bl	8005444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	609a      	str	r2, [r3, #8]
      break;
 80048f6:	e04f      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6899      	ldr	r1, [r3, #8]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f000 fd9c 	bl	8005444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800491a:	609a      	str	r2, [r3, #8]
      break;
 800491c:	e03c      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	461a      	mov	r2, r3
 800492c:	f000 fc60 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2150      	movs	r1, #80	; 0x50
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fd6a 	bl	8005410 <TIM_ITRx_SetConfig>
      break;
 800493c:	e02c      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	461a      	mov	r2, r3
 800494c:	f000 fcba 	bl	80052c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2160      	movs	r1, #96	; 0x60
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fd5a 	bl	8005410 <TIM_ITRx_SetConfig>
      break;
 800495c:	e01c      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	461a      	mov	r2, r3
 800496c:	f000 fc40 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2140      	movs	r1, #64	; 0x40
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fd4a 	bl	8005410 <TIM_ITRx_SetConfig>
      break;
 800497c:	e00c      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 fd41 	bl	8005410 <TIM_ITRx_SetConfig>
      break;
 800498e:	e003      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      break;
 8004994:	e000      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_TIM_SlaveConfigSynchro+0x18>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e031      	b.n	8004a64 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fb00 	bl	8005018 <TIM_SlaveTimer_SetConfig>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d009      	beq.n	8004a32 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e018      	b.n	8004a64 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a40:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a50:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d107      	bne.n	8004aca <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac8:	e02a      	b.n	8004b20 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d107      	bne.n	8004ae4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae2:	e01d      	b.n	8004b20 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d107      	bne.n	8004afe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2204      	movs	r2, #4
 8004af2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004afc:	e010      	b.n	8004b20 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d107      	bne.n	8004b18 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b16:	e003      	b.n	8004b20 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ffb5 	bl	8004a90 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d10b      	bne.n	8004b64 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d136      	bne.n	8004bc8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b62:	e031      	b.n	8004bc8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d10b      	bne.n	8004b86 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2202      	movs	r2, #2
 8004b72:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d125      	bne.n	8004bc8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b84:	e020      	b.n	8004bc8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d10b      	bne.n	8004ba8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2204      	movs	r2, #4
 8004b94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d114      	bne.n	8004bc8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba6:	e00f      	b.n	8004bc8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d10a      	bne.n	8004bc8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff ff4f 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d103      	bne.n	8004bfc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	771a      	strb	r2, [r3, #28]
 8004bfa:	e019      	b.n	8004c30 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d103      	bne.n	8004c0e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	771a      	strb	r2, [r3, #28]
 8004c0c:	e010      	b.n	8004c30 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d103      	bne.n	8004c20 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	771a      	strb	r2, [r3, #28]
 8004c1e:	e007      	b.n	8004c30 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d102      	bne.n	8004c30 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff ff24 	bl	8004a7e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a29      	ldr	r2, [pc, #164]	; (8004cfc <TIM_Base_SetConfig+0xb8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00b      	beq.n	8004c74 <TIM_Base_SetConfig+0x30>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d007      	beq.n	8004c74 <TIM_Base_SetConfig+0x30>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <TIM_Base_SetConfig+0xbc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_Base_SetConfig+0x30>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a25      	ldr	r2, [pc, #148]	; (8004d04 <TIM_Base_SetConfig+0xc0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d108      	bne.n	8004c86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <TIM_Base_SetConfig+0xb8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00b      	beq.n	8004ca6 <TIM_Base_SetConfig+0x62>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c94:	d007      	beq.n	8004ca6 <TIM_Base_SetConfig+0x62>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <TIM_Base_SetConfig+0xbc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d003      	beq.n	8004ca6 <TIM_Base_SetConfig+0x62>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <TIM_Base_SetConfig+0xc0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d108      	bne.n	8004cb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <TIM_Base_SetConfig+0xb8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800

08004d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f023 0201 	bic.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f023 0302 	bic.w	r3, r3, #2
 8004d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <TIM_OC1_SetConfig+0xc8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10c      	bne.n	8004d7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0308 	bic.w	r3, r3, #8
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <TIM_OC1_SetConfig+0xc8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d111      	bne.n	8004daa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40012c00 	.word	0x40012c00

08004dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 0210 	bic.w	r2, r3, #16
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0320 	bic.w	r3, r3, #32
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <TIM_OC2_SetConfig+0xd0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d10d      	bne.n	8004e50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <TIM_OC2_SetConfig+0xd0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d113      	bne.n	8004e80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	40012c00 	.word	0x40012c00

08004ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a1d      	ldr	r2, [pc, #116]	; (8004f78 <TIM_OC3_SetConfig+0xd0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10d      	bne.n	8004f22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <TIM_OC3_SetConfig+0xd0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d113      	bne.n	8004f52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	621a      	str	r2, [r3, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40012c00 	.word	0x40012c00

08004f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	031b      	lsls	r3, r3, #12
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a0f      	ldr	r2, [pc, #60]	; (8005014 <TIM_OC4_SetConfig+0x98>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d109      	bne.n	8004ff0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	019b      	lsls	r3, r3, #6
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00

08005018 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005034:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b70      	cmp	r3, #112	; 0x70
 8005060:	d01a      	beq.n	8005098 <TIM_SlaveTimer_SetConfig+0x80>
 8005062:	2b70      	cmp	r3, #112	; 0x70
 8005064:	d860      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x110>
 8005066:	2b60      	cmp	r3, #96	; 0x60
 8005068:	d054      	beq.n	8005114 <TIM_SlaveTimer_SetConfig+0xfc>
 800506a:	2b60      	cmp	r3, #96	; 0x60
 800506c:	d85c      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x110>
 800506e:	2b50      	cmp	r3, #80	; 0x50
 8005070:	d046      	beq.n	8005100 <TIM_SlaveTimer_SetConfig+0xe8>
 8005072:	2b50      	cmp	r3, #80	; 0x50
 8005074:	d858      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x110>
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d019      	beq.n	80050ae <TIM_SlaveTimer_SetConfig+0x96>
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d854      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x110>
 800507e:	2b30      	cmp	r3, #48	; 0x30
 8005080:	d055      	beq.n	800512e <TIM_SlaveTimer_SetConfig+0x116>
 8005082:	2b30      	cmp	r3, #48	; 0x30
 8005084:	d850      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x110>
 8005086:	2b20      	cmp	r3, #32
 8005088:	d051      	beq.n	800512e <TIM_SlaveTimer_SetConfig+0x116>
 800508a:	2b20      	cmp	r3, #32
 800508c:	d84c      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x110>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04d      	beq.n	800512e <TIM_SlaveTimer_SetConfig+0x116>
 8005092:	2b10      	cmp	r3, #16
 8005094:	d04b      	beq.n	800512e <TIM_SlaveTimer_SetConfig+0x116>
 8005096:	e047      	b.n	8005128 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68d9      	ldr	r1, [r3, #12]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f000 f9cc 	bl	8005444 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80050ac:	e040      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	d101      	bne.n	80050ba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e03b      	b.n	8005132 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
      break;
 80050fe:	e017      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6899      	ldr	r1, [r3, #8]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	461a      	mov	r2, r3
 800510e:	f000 f86f 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005112:	e00d      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6899      	ldr	r1, [r3, #8]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	461a      	mov	r2, r3
 8005122:	f000 f8cf 	bl	80052c4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005126:	e003      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	75fb      	strb	r3, [r7, #23]
      break;
 800512c:	e000      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800512e:	bf00      	nop
  }

  return status;
 8005130:	7dfb      	ldrb	r3, [r7, #23]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f023 0201 	bic.w	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <TIM_TI1_SetConfig+0xa8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00b      	beq.n	8005182 <TIM_TI1_SetConfig+0x46>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005170:	d007      	beq.n	8005182 <TIM_TI1_SetConfig+0x46>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <TIM_TI1_SetConfig+0xac>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d003      	beq.n	8005182 <TIM_TI1_SetConfig+0x46>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <TIM_TI1_SetConfig+0xb0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d101      	bne.n	8005186 <TIM_TI1_SetConfig+0x4a>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <TIM_TI1_SetConfig+0x4c>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	e003      	b.n	80051a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f023 030a 	bic.w	r3, r3, #10
 80051c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f003 030a 	and.w	r3, r3, #10
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800

080051f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 030a 	bic.w	r3, r3, #10
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f023 0210 	bic.w	r2, r3, #16
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800528a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	031b      	lsls	r3, r3, #12
 8005290:	b29b      	uxth	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800529e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0210 	bic.w	r2, r3, #16
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	031b      	lsls	r3, r3, #12
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005300:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005322:	b480      	push	{r7}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	b2db      	uxtb	r3, r3
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005372:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	031b      	lsls	r3, r3, #12
 80053dc:	b29b      	uxth	r3, r3
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	031b      	lsls	r3, r3, #12
 80053f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	f043 0307 	orr.w	r3, r3, #7
 8005432:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	609a      	str	r2, [r3, #8]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800545e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	021a      	lsls	r2, r3, #8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	431a      	orrs	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4313      	orrs	r3, r2
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	609a      	str	r2, [r3, #8]
}
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005482:	b480      	push	{r7}
 8005484:	b087      	sub	sp, #28
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2201      	movs	r2, #1
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	43db      	mvns	r3, r3
 80054a4:	401a      	ands	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	431a      	orrs	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	621a      	str	r2, [r3, #32]
}
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr
	...

080054cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e046      	b.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a16      	ldr	r2, [pc, #88]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00e      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005530:	d009      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a12      	ldr	r2, [pc, #72]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d004      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a10      	ldr	r2, [pc, #64]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d10c      	bne.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4313      	orrs	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800

08005588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e03d      	b.n	8005620 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr
	...

0800562c <sin>:
 800562c:	b530      	push	{r4, r5, lr}
 800562e:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <sin+0x84>)
 8005630:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005634:	4293      	cmp	r3, r2
 8005636:	b087      	sub	sp, #28
 8005638:	dc06      	bgt.n	8005648 <sin+0x1c>
 800563a:	2300      	movs	r3, #0
 800563c:	2200      	movs	r2, #0
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	2300      	movs	r3, #0
 8005642:	f000 fe5d 	bl	8006300 <__kernel_sin>
 8005646:	e006      	b.n	8005656 <sin+0x2a>
 8005648:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <sin+0x88>)
 800564a:	4293      	cmp	r3, r2
 800564c:	dd05      	ble.n	800565a <sin+0x2e>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	f7fa fe35 	bl	80002c0 <__aeabi_dsub>
 8005656:	b007      	add	sp, #28
 8005658:	bd30      	pop	{r4, r5, pc}
 800565a:	aa02      	add	r2, sp, #8
 800565c:	f000 f858 	bl	8005710 <__ieee754_rem_pio2>
 8005660:	f000 0003 	and.w	r0, r0, #3
 8005664:	2801      	cmp	r0, #1
 8005666:	d009      	beq.n	800567c <sin+0x50>
 8005668:	2802      	cmp	r0, #2
 800566a:	d00e      	beq.n	800568a <sin+0x5e>
 800566c:	b9c0      	cbnz	r0, 80056a0 <sin+0x74>
 800566e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005672:	2301      	movs	r3, #1
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567a:	e7e2      	b.n	8005642 <sin+0x16>
 800567c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005684:	f000 fa3c 	bl	8005b00 <__kernel_cos>
 8005688:	e7e5      	b.n	8005656 <sin+0x2a>
 800568a:	2301      	movs	r3, #1
 800568c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005696:	f000 fe33 	bl	8006300 <__kernel_sin>
 800569a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800569e:	e7da      	b.n	8005656 <sin+0x2a>
 80056a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056a8:	f000 fa2a 	bl	8005b00 <__kernel_cos>
 80056ac:	e7f5      	b.n	800569a <sin+0x6e>
 80056ae:	bf00      	nop
 80056b0:	3fe921fb 	.word	0x3fe921fb
 80056b4:	7fefffff 	.word	0x7fefffff

080056b8 <tan>:
 80056b8:	b530      	push	{r4, r5, lr}
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <tan+0x4c>)
 80056bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80056c0:	4293      	cmp	r3, r2
 80056c2:	b087      	sub	sp, #28
 80056c4:	dc06      	bgt.n	80056d4 <tan+0x1c>
 80056c6:	2301      	movs	r3, #1
 80056c8:	2200      	movs	r2, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2300      	movs	r3, #0
 80056ce:	f000 fecf 	bl	8006470 <__kernel_tan>
 80056d2:	e006      	b.n	80056e2 <tan+0x2a>
 80056d4:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <tan+0x50>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	dd05      	ble.n	80056e6 <tan+0x2e>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	f7fa fdef 	bl	80002c0 <__aeabi_dsub>
 80056e2:	b007      	add	sp, #28
 80056e4:	bd30      	pop	{r4, r5, pc}
 80056e6:	aa02      	add	r2, sp, #8
 80056e8:	f000 f812 	bl	8005710 <__ieee754_rem_pio2>
 80056ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f0:	0040      	lsls	r0, r0, #1
 80056f2:	f000 0002 	and.w	r0, r0, #2
 80056f6:	f1c0 0001 	rsb	r0, r0, #1
 80056fa:	9000      	str	r0, [sp, #0]
 80056fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005700:	e7e5      	b.n	80056ce <tan+0x16>
 8005702:	bf00      	nop
 8005704:	3fe921fb 	.word	0x3fe921fb
 8005708:	7fefffff 	.word	0x7fefffff
 800570c:	00000000 	.word	0x00000000

08005710 <__ieee754_rem_pio2>:
 8005710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	4614      	mov	r4, r2
 8005716:	4ac4      	ldr	r2, [pc, #784]	; (8005a28 <__ieee754_rem_pio2+0x318>)
 8005718:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800571c:	b08d      	sub	sp, #52	; 0x34
 800571e:	4592      	cmp	sl, r2
 8005720:	9104      	str	r1, [sp, #16]
 8005722:	dc07      	bgt.n	8005734 <__ieee754_rem_pio2+0x24>
 8005724:	2200      	movs	r2, #0
 8005726:	2300      	movs	r3, #0
 8005728:	e9c4 0100 	strd	r0, r1, [r4]
 800572c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005730:	2500      	movs	r5, #0
 8005732:	e024      	b.n	800577e <__ieee754_rem_pio2+0x6e>
 8005734:	4abd      	ldr	r2, [pc, #756]	; (8005a2c <__ieee754_rem_pio2+0x31c>)
 8005736:	4592      	cmp	sl, r2
 8005738:	dc72      	bgt.n	8005820 <__ieee754_rem_pio2+0x110>
 800573a:	9b04      	ldr	r3, [sp, #16]
 800573c:	4dbc      	ldr	r5, [pc, #752]	; (8005a30 <__ieee754_rem_pio2+0x320>)
 800573e:	2b00      	cmp	r3, #0
 8005740:	a3ab      	add	r3, pc, #684	; (adr r3, 80059f0 <__ieee754_rem_pio2+0x2e0>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	dd36      	ble.n	80057b6 <__ieee754_rem_pio2+0xa6>
 8005748:	f7fa fdba 	bl	80002c0 <__aeabi_dsub>
 800574c:	45aa      	cmp	sl, r5
 800574e:	4606      	mov	r6, r0
 8005750:	460f      	mov	r7, r1
 8005752:	d018      	beq.n	8005786 <__ieee754_rem_pio2+0x76>
 8005754:	a3a8      	add	r3, pc, #672	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x2e8>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f7fa fdb1 	bl	80002c0 <__aeabi_dsub>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4630      	mov	r0, r6
 8005764:	e9c4 2300 	strd	r2, r3, [r4]
 8005768:	4639      	mov	r1, r7
 800576a:	f7fa fda9 	bl	80002c0 <__aeabi_dsub>
 800576e:	a3a2      	add	r3, pc, #648	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x2e8>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f7fa fda4 	bl	80002c0 <__aeabi_dsub>
 8005778:	2501      	movs	r5, #1
 800577a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800577e:	4628      	mov	r0, r5
 8005780:	b00d      	add	sp, #52	; 0x34
 8005782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005786:	a39e      	add	r3, pc, #632	; (adr r3, 8005a00 <__ieee754_rem_pio2+0x2f0>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fa fd98 	bl	80002c0 <__aeabi_dsub>
 8005790:	a39d      	add	r3, pc, #628	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x2f8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	4606      	mov	r6, r0
 8005798:	460f      	mov	r7, r1
 800579a:	f7fa fd91 	bl	80002c0 <__aeabi_dsub>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4630      	mov	r0, r6
 80057a4:	e9c4 2300 	strd	r2, r3, [r4]
 80057a8:	4639      	mov	r1, r7
 80057aa:	f7fa fd89 	bl	80002c0 <__aeabi_dsub>
 80057ae:	a396      	add	r3, pc, #600	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x2f8>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	e7de      	b.n	8005774 <__ieee754_rem_pio2+0x64>
 80057b6:	f7fa fd85 	bl	80002c4 <__adddf3>
 80057ba:	45aa      	cmp	sl, r5
 80057bc:	4606      	mov	r6, r0
 80057be:	460f      	mov	r7, r1
 80057c0:	d016      	beq.n	80057f0 <__ieee754_rem_pio2+0xe0>
 80057c2:	a38d      	add	r3, pc, #564	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x2e8>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f7fa fd7c 	bl	80002c4 <__adddf3>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4630      	mov	r0, r6
 80057d2:	e9c4 2300 	strd	r2, r3, [r4]
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fd72 	bl	80002c0 <__aeabi_dsub>
 80057dc:	a386      	add	r3, pc, #536	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x2e8>)
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	f7fa fd6f 	bl	80002c4 <__adddf3>
 80057e6:	f04f 35ff 	mov.w	r5, #4294967295
 80057ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80057ee:	e7c6      	b.n	800577e <__ieee754_rem_pio2+0x6e>
 80057f0:	a383      	add	r3, pc, #524	; (adr r3, 8005a00 <__ieee754_rem_pio2+0x2f0>)
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f7fa fd65 	bl	80002c4 <__adddf3>
 80057fa:	a383      	add	r3, pc, #524	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x2f8>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	4606      	mov	r6, r0
 8005802:	460f      	mov	r7, r1
 8005804:	f7fa fd5e 	bl	80002c4 <__adddf3>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4630      	mov	r0, r6
 800580e:	e9c4 2300 	strd	r2, r3, [r4]
 8005812:	4639      	mov	r1, r7
 8005814:	f7fa fd54 	bl	80002c0 <__aeabi_dsub>
 8005818:	a37b      	add	r3, pc, #492	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x2f8>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	e7e0      	b.n	80057e2 <__ieee754_rem_pio2+0xd2>
 8005820:	4a84      	ldr	r2, [pc, #528]	; (8005a34 <__ieee754_rem_pio2+0x324>)
 8005822:	4592      	cmp	sl, r2
 8005824:	f300 80d5 	bgt.w	80059d2 <__ieee754_rem_pio2+0x2c2>
 8005828:	f001 f81e 	bl	8006868 <fabs>
 800582c:	a378      	add	r3, pc, #480	; (adr r3, 8005a10 <__ieee754_rem_pio2+0x300>)
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	4606      	mov	r6, r0
 8005834:	460f      	mov	r7, r1
 8005836:	f7fa fefb 	bl	8000630 <__aeabi_dmul>
 800583a:	2200      	movs	r2, #0
 800583c:	4b7e      	ldr	r3, [pc, #504]	; (8005a38 <__ieee754_rem_pio2+0x328>)
 800583e:	f7fa fd41 	bl	80002c4 <__adddf3>
 8005842:	f7fb f98f 	bl	8000b64 <__aeabi_d2iz>
 8005846:	4605      	mov	r5, r0
 8005848:	f7fa fe88 	bl	800055c <__aeabi_i2d>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005854:	a366      	add	r3, pc, #408	; (adr r3, 80059f0 <__ieee754_rem_pio2+0x2e0>)
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	f7fa fee9 	bl	8000630 <__aeabi_dmul>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4630      	mov	r0, r6
 8005864:	4639      	mov	r1, r7
 8005866:	f7fa fd2b 	bl	80002c0 <__aeabi_dsub>
 800586a:	a363      	add	r3, pc, #396	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x2e8>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	4680      	mov	r8, r0
 8005872:	4689      	mov	r9, r1
 8005874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005878:	f7fa feda 	bl	8000630 <__aeabi_dmul>
 800587c:	2d1f      	cmp	r5, #31
 800587e:	4606      	mov	r6, r0
 8005880:	460f      	mov	r7, r1
 8005882:	dc0e      	bgt.n	80058a2 <__ieee754_rem_pio2+0x192>
 8005884:	4b6d      	ldr	r3, [pc, #436]	; (8005a3c <__ieee754_rem_pio2+0x32c>)
 8005886:	1e6a      	subs	r2, r5, #1
 8005888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588c:	4553      	cmp	r3, sl
 800588e:	d008      	beq.n	80058a2 <__ieee754_rem_pio2+0x192>
 8005890:	4632      	mov	r2, r6
 8005892:	463b      	mov	r3, r7
 8005894:	4640      	mov	r0, r8
 8005896:	4649      	mov	r1, r9
 8005898:	f7fa fd12 	bl	80002c0 <__aeabi_dsub>
 800589c:	e9c4 0100 	strd	r0, r1, [r4]
 80058a0:	e013      	b.n	80058ca <__ieee754_rem_pio2+0x1ba>
 80058a2:	463b      	mov	r3, r7
 80058a4:	4632      	mov	r2, r6
 80058a6:	4640      	mov	r0, r8
 80058a8:	4649      	mov	r1, r9
 80058aa:	f7fa fd09 	bl	80002c0 <__aeabi_dsub>
 80058ae:	ea4f 532a 	mov.w	r3, sl, asr #20
 80058b2:	9305      	str	r3, [sp, #20]
 80058b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80058b8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80058bc:	f1ba 0f10 	cmp.w	sl, #16
 80058c0:	dc1f      	bgt.n	8005902 <__ieee754_rem_pio2+0x1f2>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	e9c4 2300 	strd	r2, r3, [r4]
 80058ca:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80058ce:	4640      	mov	r0, r8
 80058d0:	4653      	mov	r3, sl
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fa fcf4 	bl	80002c0 <__aeabi_dsub>
 80058d8:	4632      	mov	r2, r6
 80058da:	463b      	mov	r3, r7
 80058dc:	f7fa fcf0 	bl	80002c0 <__aeabi_dsub>
 80058e0:	460b      	mov	r3, r1
 80058e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058e6:	9904      	ldr	r1, [sp, #16]
 80058e8:	4602      	mov	r2, r0
 80058ea:	2900      	cmp	r1, #0
 80058ec:	f6bf af47 	bge.w	800577e <__ieee754_rem_pio2+0x6e>
 80058f0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80058f4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80058f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058fc:	60e3      	str	r3, [r4, #12]
 80058fe:	426d      	negs	r5, r5
 8005900:	e73d      	b.n	800577e <__ieee754_rem_pio2+0x6e>
 8005902:	a33f      	add	r3, pc, #252	; (adr r3, 8005a00 <__ieee754_rem_pio2+0x2f0>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800590c:	f7fa fe90 	bl	8000630 <__aeabi_dmul>
 8005910:	4606      	mov	r6, r0
 8005912:	460f      	mov	r7, r1
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4640      	mov	r0, r8
 800591a:	4649      	mov	r1, r9
 800591c:	f7fa fcd0 	bl	80002c0 <__aeabi_dsub>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4682      	mov	sl, r0
 8005926:	468b      	mov	fp, r1
 8005928:	4640      	mov	r0, r8
 800592a:	4649      	mov	r1, r9
 800592c:	f7fa fcc8 	bl	80002c0 <__aeabi_dsub>
 8005930:	4632      	mov	r2, r6
 8005932:	463b      	mov	r3, r7
 8005934:	f7fa fcc4 	bl	80002c0 <__aeabi_dsub>
 8005938:	a333      	add	r3, pc, #204	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x2f8>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	4606      	mov	r6, r0
 8005940:	460f      	mov	r7, r1
 8005942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005946:	f7fa fe73 	bl	8000630 <__aeabi_dmul>
 800594a:	4632      	mov	r2, r6
 800594c:	463b      	mov	r3, r7
 800594e:	f7fa fcb7 	bl	80002c0 <__aeabi_dsub>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4606      	mov	r6, r0
 8005958:	460f      	mov	r7, r1
 800595a:	4650      	mov	r0, sl
 800595c:	4659      	mov	r1, fp
 800595e:	f7fa fcaf 	bl	80002c0 <__aeabi_dsub>
 8005962:	9a05      	ldr	r2, [sp, #20]
 8005964:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b31      	cmp	r3, #49	; 0x31
 800596c:	dc06      	bgt.n	800597c <__ieee754_rem_pio2+0x26c>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	46d0      	mov	r8, sl
 8005974:	46d9      	mov	r9, fp
 8005976:	e9c4 2300 	strd	r2, r3, [r4]
 800597a:	e7a6      	b.n	80058ca <__ieee754_rem_pio2+0x1ba>
 800597c:	a326      	add	r3, pc, #152	; (adr r3, 8005a18 <__ieee754_rem_pio2+0x308>)
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005986:	f7fa fe53 	bl	8000630 <__aeabi_dmul>
 800598a:	4606      	mov	r6, r0
 800598c:	460f      	mov	r7, r1
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4650      	mov	r0, sl
 8005994:	4659      	mov	r1, fp
 8005996:	f7fa fc93 	bl	80002c0 <__aeabi_dsub>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4680      	mov	r8, r0
 80059a0:	4689      	mov	r9, r1
 80059a2:	4650      	mov	r0, sl
 80059a4:	4659      	mov	r1, fp
 80059a6:	f7fa fc8b 	bl	80002c0 <__aeabi_dsub>
 80059aa:	4632      	mov	r2, r6
 80059ac:	463b      	mov	r3, r7
 80059ae:	f7fa fc87 	bl	80002c0 <__aeabi_dsub>
 80059b2:	a31b      	add	r3, pc, #108	; (adr r3, 8005a20 <__ieee754_rem_pio2+0x310>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	4606      	mov	r6, r0
 80059ba:	460f      	mov	r7, r1
 80059bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059c0:	f7fa fe36 	bl	8000630 <__aeabi_dmul>
 80059c4:	4632      	mov	r2, r6
 80059c6:	463b      	mov	r3, r7
 80059c8:	f7fa fc7a 	bl	80002c0 <__aeabi_dsub>
 80059cc:	4606      	mov	r6, r0
 80059ce:	460f      	mov	r7, r1
 80059d0:	e75e      	b.n	8005890 <__ieee754_rem_pio2+0x180>
 80059d2:	4a1b      	ldr	r2, [pc, #108]	; (8005a40 <__ieee754_rem_pio2+0x330>)
 80059d4:	4592      	cmp	sl, r2
 80059d6:	dd35      	ble.n	8005a44 <__ieee754_rem_pio2+0x334>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	f7fa fc70 	bl	80002c0 <__aeabi_dsub>
 80059e0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80059e4:	e9c4 0100 	strd	r0, r1, [r4]
 80059e8:	e6a2      	b.n	8005730 <__ieee754_rem_pio2+0x20>
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w
 80059f0:	54400000 	.word	0x54400000
 80059f4:	3ff921fb 	.word	0x3ff921fb
 80059f8:	1a626331 	.word	0x1a626331
 80059fc:	3dd0b461 	.word	0x3dd0b461
 8005a00:	1a600000 	.word	0x1a600000
 8005a04:	3dd0b461 	.word	0x3dd0b461
 8005a08:	2e037073 	.word	0x2e037073
 8005a0c:	3ba3198a 	.word	0x3ba3198a
 8005a10:	6dc9c883 	.word	0x6dc9c883
 8005a14:	3fe45f30 	.word	0x3fe45f30
 8005a18:	2e000000 	.word	0x2e000000
 8005a1c:	3ba3198a 	.word	0x3ba3198a
 8005a20:	252049c1 	.word	0x252049c1
 8005a24:	397b839a 	.word	0x397b839a
 8005a28:	3fe921fb 	.word	0x3fe921fb
 8005a2c:	4002d97b 	.word	0x4002d97b
 8005a30:	3ff921fb 	.word	0x3ff921fb
 8005a34:	413921fb 	.word	0x413921fb
 8005a38:	3fe00000 	.word	0x3fe00000
 8005a3c:	08006b04 	.word	0x08006b04
 8005a40:	7fefffff 	.word	0x7fefffff
 8005a44:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005a48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005a4c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005a50:	460f      	mov	r7, r1
 8005a52:	4606      	mov	r6, r0
 8005a54:	f7fb f886 	bl	8000b64 <__aeabi_d2iz>
 8005a58:	f7fa fd80 	bl	800055c <__aeabi_i2d>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4630      	mov	r0, r6
 8005a62:	4639      	mov	r1, r7
 8005a64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a68:	f7fa fc2a 	bl	80002c0 <__aeabi_dsub>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4b22      	ldr	r3, [pc, #136]	; (8005af8 <__ieee754_rem_pio2+0x3e8>)
 8005a70:	f7fa fdde 	bl	8000630 <__aeabi_dmul>
 8005a74:	460f      	mov	r7, r1
 8005a76:	4606      	mov	r6, r0
 8005a78:	f7fb f874 	bl	8000b64 <__aeabi_d2iz>
 8005a7c:	f7fa fd6e 	bl	800055c <__aeabi_i2d>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4630      	mov	r0, r6
 8005a86:	4639      	mov	r1, r7
 8005a88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005a8c:	f7fa fc18 	bl	80002c0 <__aeabi_dsub>
 8005a90:	2200      	movs	r2, #0
 8005a92:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <__ieee754_rem_pio2+0x3e8>)
 8005a94:	f7fa fdcc 	bl	8000630 <__aeabi_dmul>
 8005a98:	f04f 0803 	mov.w	r8, #3
 8005a9c:	2600      	movs	r6, #0
 8005a9e:	2700      	movs	r7, #0
 8005aa0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005aa4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8005aae:	463b      	mov	r3, r7
 8005ab0:	46c2      	mov	sl, r8
 8005ab2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ab6:	f7fb f823 	bl	8000b00 <__aeabi_dcmpeq>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d1f4      	bne.n	8005aa8 <__ieee754_rem_pio2+0x398>
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <__ieee754_rem_pio2+0x3ec>)
 8005ac0:	462a      	mov	r2, r5
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	a806      	add	r0, sp, #24
 8005acc:	4653      	mov	r3, sl
 8005ace:	f000 f8d5 	bl	8005c7c <__kernel_rem_pio2>
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f6bf ae51 	bge.w	800577e <__ieee754_rem_pio2+0x6e>
 8005adc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005ae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ae4:	e9c4 2300 	strd	r2, r3, [r4]
 8005ae8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005aec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005af0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005af4:	e703      	b.n	80058fe <__ieee754_rem_pio2+0x1ee>
 8005af6:	bf00      	nop
 8005af8:	41700000 	.word	0x41700000
 8005afc:	08006b84 	.word	0x08006b84

08005b00 <__kernel_cos>:
 8005b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005b08:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	460f      	mov	r7, r1
 8005b10:	e9cd 2300 	strd	r2, r3, [sp]
 8005b14:	da04      	bge.n	8005b20 <__kernel_cos+0x20>
 8005b16:	f7fb f825 	bl	8000b64 <__aeabi_d2iz>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	f000 8086 	beq.w	8005c2c <__kernel_cos+0x12c>
 8005b20:	4642      	mov	r2, r8
 8005b22:	463b      	mov	r3, r7
 8005b24:	4640      	mov	r0, r8
 8005b26:	4639      	mov	r1, r7
 8005b28:	f7fa fd82 	bl	8000630 <__aeabi_dmul>
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4b4e      	ldr	r3, [pc, #312]	; (8005c68 <__kernel_cos+0x168>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	460d      	mov	r5, r1
 8005b34:	f7fa fd7c 	bl	8000630 <__aeabi_dmul>
 8005b38:	a33f      	add	r3, pc, #252	; (adr r3, 8005c38 <__kernel_cos+0x138>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	4682      	mov	sl, r0
 8005b40:	468b      	mov	fp, r1
 8005b42:	4620      	mov	r0, r4
 8005b44:	4629      	mov	r1, r5
 8005b46:	f7fa fd73 	bl	8000630 <__aeabi_dmul>
 8005b4a:	a33d      	add	r3, pc, #244	; (adr r3, 8005c40 <__kernel_cos+0x140>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa fbb8 	bl	80002c4 <__adddf3>
 8005b54:	4622      	mov	r2, r4
 8005b56:	462b      	mov	r3, r5
 8005b58:	f7fa fd6a 	bl	8000630 <__aeabi_dmul>
 8005b5c:	a33a      	add	r3, pc, #232	; (adr r3, 8005c48 <__kernel_cos+0x148>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fbad 	bl	80002c0 <__aeabi_dsub>
 8005b66:	4622      	mov	r2, r4
 8005b68:	462b      	mov	r3, r5
 8005b6a:	f7fa fd61 	bl	8000630 <__aeabi_dmul>
 8005b6e:	a338      	add	r3, pc, #224	; (adr r3, 8005c50 <__kernel_cos+0x150>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f7fa fba6 	bl	80002c4 <__adddf3>
 8005b78:	4622      	mov	r2, r4
 8005b7a:	462b      	mov	r3, r5
 8005b7c:	f7fa fd58 	bl	8000630 <__aeabi_dmul>
 8005b80:	a335      	add	r3, pc, #212	; (adr r3, 8005c58 <__kernel_cos+0x158>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fb9b 	bl	80002c0 <__aeabi_dsub>
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	462b      	mov	r3, r5
 8005b8e:	f7fa fd4f 	bl	8000630 <__aeabi_dmul>
 8005b92:	a333      	add	r3, pc, #204	; (adr r3, 8005c60 <__kernel_cos+0x160>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fb94 	bl	80002c4 <__adddf3>
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	462b      	mov	r3, r5
 8005ba0:	f7fa fd46 	bl	8000630 <__aeabi_dmul>
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	462b      	mov	r3, r5
 8005ba8:	f7fa fd42 	bl	8000630 <__aeabi_dmul>
 8005bac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	4639      	mov	r1, r7
 8005bb8:	f7fa fd3a 	bl	8000630 <__aeabi_dmul>
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f7fa fb7c 	bl	80002c0 <__aeabi_dsub>
 8005bc8:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <__kernel_cos+0x16c>)
 8005bca:	4680      	mov	r8, r0
 8005bcc:	429e      	cmp	r6, r3
 8005bce:	4689      	mov	r9, r1
 8005bd0:	dc0e      	bgt.n	8005bf0 <__kernel_cos+0xf0>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4650      	mov	r0, sl
 8005bd8:	4659      	mov	r1, fp
 8005bda:	f7fa fb71 	bl	80002c0 <__aeabi_dsub>
 8005bde:	4602      	mov	r2, r0
 8005be0:	2000      	movs	r0, #0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4922      	ldr	r1, [pc, #136]	; (8005c70 <__kernel_cos+0x170>)
 8005be6:	f7fa fb6b 	bl	80002c0 <__aeabi_dsub>
 8005bea:	b003      	add	sp, #12
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf0:	2400      	movs	r4, #0
 8005bf2:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <__kernel_cos+0x174>)
 8005bf4:	4622      	mov	r2, r4
 8005bf6:	429e      	cmp	r6, r3
 8005bf8:	bfcc      	ite	gt
 8005bfa:	4d1f      	ldrgt	r5, [pc, #124]	; (8005c78 <__kernel_cos+0x178>)
 8005bfc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005c00:	462b      	mov	r3, r5
 8005c02:	2000      	movs	r0, #0
 8005c04:	491a      	ldr	r1, [pc, #104]	; (8005c70 <__kernel_cos+0x170>)
 8005c06:	f7fa fb5b 	bl	80002c0 <__aeabi_dsub>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	460f      	mov	r7, r1
 8005c10:	462b      	mov	r3, r5
 8005c12:	4650      	mov	r0, sl
 8005c14:	4659      	mov	r1, fp
 8005c16:	f7fa fb53 	bl	80002c0 <__aeabi_dsub>
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	464b      	mov	r3, r9
 8005c1e:	f7fa fb4f 	bl	80002c0 <__aeabi_dsub>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4630      	mov	r0, r6
 8005c28:	4639      	mov	r1, r7
 8005c2a:	e7dc      	b.n	8005be6 <__kernel_cos+0xe6>
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	4910      	ldr	r1, [pc, #64]	; (8005c70 <__kernel_cos+0x170>)
 8005c30:	e7db      	b.n	8005bea <__kernel_cos+0xea>
 8005c32:	bf00      	nop
 8005c34:	f3af 8000 	nop.w
 8005c38:	be8838d4 	.word	0xbe8838d4
 8005c3c:	bda8fae9 	.word	0xbda8fae9
 8005c40:	bdb4b1c4 	.word	0xbdb4b1c4
 8005c44:	3e21ee9e 	.word	0x3e21ee9e
 8005c48:	809c52ad 	.word	0x809c52ad
 8005c4c:	3e927e4f 	.word	0x3e927e4f
 8005c50:	19cb1590 	.word	0x19cb1590
 8005c54:	3efa01a0 	.word	0x3efa01a0
 8005c58:	16c15177 	.word	0x16c15177
 8005c5c:	3f56c16c 	.word	0x3f56c16c
 8005c60:	5555554c 	.word	0x5555554c
 8005c64:	3fa55555 	.word	0x3fa55555
 8005c68:	3fe00000 	.word	0x3fe00000
 8005c6c:	3fd33332 	.word	0x3fd33332
 8005c70:	3ff00000 	.word	0x3ff00000
 8005c74:	3fe90000 	.word	0x3fe90000
 8005c78:	3fd20000 	.word	0x3fd20000

08005c7c <__kernel_rem_pio2>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005c84:	9308      	str	r3, [sp, #32]
 8005c86:	9106      	str	r1, [sp, #24]
 8005c88:	4bb6      	ldr	r3, [pc, #728]	; (8005f64 <__kernel_rem_pio2+0x2e8>)
 8005c8a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005c8c:	f112 0f14 	cmn.w	r2, #20
 8005c90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c94:	bfa8      	it	ge
 8005c96:	1ed4      	subge	r4, r2, #3
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	9b08      	ldr	r3, [sp, #32]
 8005c9c:	bfb8      	it	lt
 8005c9e:	2400      	movlt	r4, #0
 8005ca0:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ca4:	9307      	str	r3, [sp, #28]
 8005ca6:	bfa4      	itt	ge
 8005ca8:	2318      	movge	r3, #24
 8005caa:	fb94 f4f3 	sdivge	r4, r4, r3
 8005cae:	f06f 0317 	mvn.w	r3, #23
 8005cb2:	fb04 3303 	mla	r3, r4, r3, r3
 8005cb6:	eb03 0b02 	add.w	fp, r3, r2
 8005cba:	9a07      	ldr	r2, [sp, #28]
 8005cbc:	9b02      	ldr	r3, [sp, #8]
 8005cbe:	1aa7      	subs	r7, r4, r2
 8005cc0:	eb03 0802 	add.w	r8, r3, r2
 8005cc4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005cc6:	2500      	movs	r5, #0
 8005cc8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2300      	movs	r3, #0
 8005cd0:	9009      	str	r0, [sp, #36]	; 0x24
 8005cd2:	ae20      	add	r6, sp, #128	; 0x80
 8005cd4:	4545      	cmp	r5, r8
 8005cd6:	dd14      	ble.n	8005d02 <__kernel_rem_pio2+0x86>
 8005cd8:	f04f 0800 	mov.w	r8, #0
 8005cdc:	9a08      	ldr	r2, [sp, #32]
 8005cde:	ab20      	add	r3, sp, #128	; 0x80
 8005ce0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8005ce4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8005ce8:	9b02      	ldr	r3, [sp, #8]
 8005cea:	4598      	cmp	r8, r3
 8005cec:	dc35      	bgt.n	8005d5a <__kernel_rem_pio2+0xde>
 8005cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f1a3 0908 	sub.w	r9, r3, #8
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	462f      	mov	r7, r5
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	e9cd 2300 	strd	r2, r3, [sp]
 8005d00:	e01f      	b.n	8005d42 <__kernel_rem_pio2+0xc6>
 8005d02:	42ef      	cmn	r7, r5
 8005d04:	d40b      	bmi.n	8005d1e <__kernel_rem_pio2+0xa2>
 8005d06:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005d0a:	e9cd 2300 	strd	r2, r3, [sp]
 8005d0e:	f7fa fc25 	bl	800055c <__aeabi_i2d>
 8005d12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d16:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005d1a:	3501      	adds	r5, #1
 8005d1c:	e7da      	b.n	8005cd4 <__kernel_rem_pio2+0x58>
 8005d1e:	4610      	mov	r0, r2
 8005d20:	4619      	mov	r1, r3
 8005d22:	e7f8      	b.n	8005d16 <__kernel_rem_pio2+0x9a>
 8005d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d28:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005d2c:	f7fa fc80 	bl	8000630 <__aeabi_dmul>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d38:	f7fa fac4 	bl	80002c4 <__adddf3>
 8005d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8005d40:	3601      	adds	r6, #1
 8005d42:	9b07      	ldr	r3, [sp, #28]
 8005d44:	3f08      	subs	r7, #8
 8005d46:	429e      	cmp	r6, r3
 8005d48:	ddec      	ble.n	8005d24 <__kernel_rem_pio2+0xa8>
 8005d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d4e:	f108 0801 	add.w	r8, r8, #1
 8005d52:	e8ea 2302 	strd	r2, r3, [sl], #8
 8005d56:	3508      	adds	r5, #8
 8005d58:	e7c6      	b.n	8005ce8 <__kernel_rem_pio2+0x6c>
 8005d5a:	9b02      	ldr	r3, [sp, #8]
 8005d5c:	aa0c      	add	r2, sp, #48	; 0x30
 8005d5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d64:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005d66:	9e02      	ldr	r6, [sp, #8]
 8005d68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005d6e:	ab98      	add	r3, sp, #608	; 0x260
 8005d70:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d74:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8005d78:	ab70      	add	r3, sp, #448	; 0x1c0
 8005d7a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8005d7e:	46d0      	mov	r8, sl
 8005d80:	46b1      	mov	r9, r6
 8005d82:	af0c      	add	r7, sp, #48	; 0x30
 8005d84:	9700      	str	r7, [sp, #0]
 8005d86:	f1b9 0f00 	cmp.w	r9, #0
 8005d8a:	f1a8 0808 	sub.w	r8, r8, #8
 8005d8e:	dc71      	bgt.n	8005e74 <__kernel_rem_pio2+0x1f8>
 8005d90:	465a      	mov	r2, fp
 8005d92:	4620      	mov	r0, r4
 8005d94:	4629      	mov	r1, r5
 8005d96:	f000 fdeb 	bl	8006970 <scalbn>
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005da0:	4604      	mov	r4, r0
 8005da2:	460d      	mov	r5, r1
 8005da4:	f7fa fc44 	bl	8000630 <__aeabi_dmul>
 8005da8:	f000 fd62 	bl	8006870 <floor>
 8005dac:	2200      	movs	r2, #0
 8005dae:	4b6e      	ldr	r3, [pc, #440]	; (8005f68 <__kernel_rem_pio2+0x2ec>)
 8005db0:	f7fa fc3e 	bl	8000630 <__aeabi_dmul>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4620      	mov	r0, r4
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f7fa fa80 	bl	80002c0 <__aeabi_dsub>
 8005dc0:	460d      	mov	r5, r1
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	f7fa fece 	bl	8000b64 <__aeabi_d2iz>
 8005dc8:	9004      	str	r0, [sp, #16]
 8005dca:	f7fa fbc7 	bl	800055c <__aeabi_i2d>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	f7fa fa73 	bl	80002c0 <__aeabi_dsub>
 8005dda:	f1bb 0f00 	cmp.w	fp, #0
 8005dde:	4680      	mov	r8, r0
 8005de0:	4689      	mov	r9, r1
 8005de2:	dd70      	ble.n	8005ec6 <__kernel_rem_pio2+0x24a>
 8005de4:	1e72      	subs	r2, r6, #1
 8005de6:	ab0c      	add	r3, sp, #48	; 0x30
 8005de8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005dec:	9c04      	ldr	r4, [sp, #16]
 8005dee:	f1cb 0118 	rsb	r1, fp, #24
 8005df2:	fa40 f301 	asr.w	r3, r0, r1
 8005df6:	441c      	add	r4, r3
 8005df8:	408b      	lsls	r3, r1
 8005dfa:	1ac0      	subs	r0, r0, r3
 8005dfc:	ab0c      	add	r3, sp, #48	; 0x30
 8005dfe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005e02:	f1cb 0317 	rsb	r3, fp, #23
 8005e06:	9404      	str	r4, [sp, #16]
 8005e08:	fa40 f303 	asr.w	r3, r0, r3
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	9b00      	ldr	r3, [sp, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	dd66      	ble.n	8005ee2 <__kernel_rem_pio2+0x266>
 8005e14:	2200      	movs	r2, #0
 8005e16:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005e1a:	4614      	mov	r4, r2
 8005e1c:	9b04      	ldr	r3, [sp, #16]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	4296      	cmp	r6, r2
 8005e24:	f300 80ac 	bgt.w	8005f80 <__kernel_rem_pio2+0x304>
 8005e28:	f1bb 0f00 	cmp.w	fp, #0
 8005e2c:	dd07      	ble.n	8005e3e <__kernel_rem_pio2+0x1c2>
 8005e2e:	f1bb 0f01 	cmp.w	fp, #1
 8005e32:	f000 80b4 	beq.w	8005f9e <__kernel_rem_pio2+0x322>
 8005e36:	f1bb 0f02 	cmp.w	fp, #2
 8005e3a:	f000 80ba 	beq.w	8005fb2 <__kernel_rem_pio2+0x336>
 8005e3e:	9b00      	ldr	r3, [sp, #0]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d14e      	bne.n	8005ee2 <__kernel_rem_pio2+0x266>
 8005e44:	4642      	mov	r2, r8
 8005e46:	464b      	mov	r3, r9
 8005e48:	2000      	movs	r0, #0
 8005e4a:	4948      	ldr	r1, [pc, #288]	; (8005f6c <__kernel_rem_pio2+0x2f0>)
 8005e4c:	f7fa fa38 	bl	80002c0 <__aeabi_dsub>
 8005e50:	4680      	mov	r8, r0
 8005e52:	4689      	mov	r9, r1
 8005e54:	2c00      	cmp	r4, #0
 8005e56:	d044      	beq.n	8005ee2 <__kernel_rem_pio2+0x266>
 8005e58:	465a      	mov	r2, fp
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	4943      	ldr	r1, [pc, #268]	; (8005f6c <__kernel_rem_pio2+0x2f0>)
 8005e5e:	f000 fd87 	bl	8006970 <scalbn>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4640      	mov	r0, r8
 8005e68:	4649      	mov	r1, r9
 8005e6a:	f7fa fa29 	bl	80002c0 <__aeabi_dsub>
 8005e6e:	4680      	mov	r8, r0
 8005e70:	4689      	mov	r9, r1
 8005e72:	e036      	b.n	8005ee2 <__kernel_rem_pio2+0x266>
 8005e74:	2200      	movs	r2, #0
 8005e76:	4b3e      	ldr	r3, [pc, #248]	; (8005f70 <__kernel_rem_pio2+0x2f4>)
 8005e78:	4620      	mov	r0, r4
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	f7fa fbd8 	bl	8000630 <__aeabi_dmul>
 8005e80:	f7fa fe70 	bl	8000b64 <__aeabi_d2iz>
 8005e84:	f7fa fb6a 	bl	800055c <__aeabi_i2d>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e90:	2200      	movs	r2, #0
 8005e92:	4b38      	ldr	r3, [pc, #224]	; (8005f74 <__kernel_rem_pio2+0x2f8>)
 8005e94:	f7fa fbcc 	bl	8000630 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa fa0e 	bl	80002c0 <__aeabi_dsub>
 8005ea4:	f7fa fe5e 	bl	8000b64 <__aeabi_d2iz>
 8005ea8:	9b00      	ldr	r3, [sp, #0]
 8005eaa:	f109 39ff 	add.w	r9, r9, #4294967295
 8005eae:	f843 0b04 	str.w	r0, [r3], #4
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eb8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005ebc:	f7fa fa02 	bl	80002c4 <__adddf3>
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	e75f      	b.n	8005d86 <__kernel_rem_pio2+0x10a>
 8005ec6:	d105      	bne.n	8005ed4 <__kernel_rem_pio2+0x258>
 8005ec8:	1e73      	subs	r3, r6, #1
 8005eca:	aa0c      	add	r2, sp, #48	; 0x30
 8005ecc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005ed0:	15c3      	asrs	r3, r0, #23
 8005ed2:	e79b      	b.n	8005e0c <__kernel_rem_pio2+0x190>
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	4b28      	ldr	r3, [pc, #160]	; (8005f78 <__kernel_rem_pio2+0x2fc>)
 8005ed8:	f7fa fe30 	bl	8000b3c <__aeabi_dcmpge>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d13e      	bne.n	8005f5e <__kernel_rem_pio2+0x2e2>
 8005ee0:	9000      	str	r0, [sp, #0]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	4649      	mov	r1, r9
 8005eea:	f7fa fe09 	bl	8000b00 <__aeabi_dcmpeq>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f000 80b1 	beq.w	8006056 <__kernel_rem_pio2+0x3da>
 8005ef4:	1e74      	subs	r4, r6, #1
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	2200      	movs	r2, #0
 8005efa:	9902      	ldr	r1, [sp, #8]
 8005efc:	428b      	cmp	r3, r1
 8005efe:	da5f      	bge.n	8005fc0 <__kernel_rem_pio2+0x344>
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	d074      	beq.n	8005fee <__kernel_rem_pio2+0x372>
 8005f04:	ab0c      	add	r3, sp, #48	; 0x30
 8005f06:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005f0a:	f1ab 0b18 	sub.w	fp, fp, #24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 809f 	beq.w	8006052 <__kernel_rem_pio2+0x3d6>
 8005f14:	465a      	mov	r2, fp
 8005f16:	2000      	movs	r0, #0
 8005f18:	4914      	ldr	r1, [pc, #80]	; (8005f6c <__kernel_rem_pio2+0x2f0>)
 8005f1a:	f000 fd29 	bl	8006970 <scalbn>
 8005f1e:	46a2      	mov	sl, r4
 8005f20:	4606      	mov	r6, r0
 8005f22:	460f      	mov	r7, r1
 8005f24:	f04f 0800 	mov.w	r8, #0
 8005f28:	ab70      	add	r3, sp, #448	; 0x1c0
 8005f2a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8005f70 <__kernel_rem_pio2+0x2f4>
 8005f2e:	00e5      	lsls	r5, r4, #3
 8005f30:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8005f34:	f1ba 0f00 	cmp.w	sl, #0
 8005f38:	f280 80c3 	bge.w	80060c2 <__kernel_rem_pio2+0x446>
 8005f3c:	4626      	mov	r6, r4
 8005f3e:	2e00      	cmp	r6, #0
 8005f40:	f2c0 80f5 	blt.w	800612e <__kernel_rem_pio2+0x4b2>
 8005f44:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <__kernel_rem_pio2+0x300>)
 8005f46:	f04f 0a00 	mov.w	sl, #0
 8005f4a:	9307      	str	r3, [sp, #28]
 8005f4c:	ab70      	add	r3, sp, #448	; 0x1c0
 8005f4e:	f04f 0b00 	mov.w	fp, #0
 8005f52:	f04f 0800 	mov.w	r8, #0
 8005f56:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005f5a:	1ba7      	subs	r7, r4, r6
 8005f5c:	e0db      	b.n	8006116 <__kernel_rem_pio2+0x49a>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	e757      	b.n	8005e14 <__kernel_rem_pio2+0x198>
 8005f64:	08006cd0 	.word	0x08006cd0
 8005f68:	40200000 	.word	0x40200000
 8005f6c:	3ff00000 	.word	0x3ff00000
 8005f70:	3e700000 	.word	0x3e700000
 8005f74:	41700000 	.word	0x41700000
 8005f78:	3fe00000 	.word	0x3fe00000
 8005f7c:	08006c90 	.word	0x08006c90
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	b944      	cbnz	r4, 8005f96 <__kernel_rem_pio2+0x31a>
 8005f84:	b11b      	cbz	r3, 8005f8e <__kernel_rem_pio2+0x312>
 8005f86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	461c      	mov	r4, r3
 8005f90:	3201      	adds	r2, #1
 8005f92:	3704      	adds	r7, #4
 8005f94:	e745      	b.n	8005e22 <__kernel_rem_pio2+0x1a6>
 8005f96:	1acb      	subs	r3, r1, r3
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	e7f7      	b.n	8005f8e <__kernel_rem_pio2+0x312>
 8005f9e:	1e72      	subs	r2, r6, #1
 8005fa0:	ab0c      	add	r3, sp, #48	; 0x30
 8005fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005faa:	a90c      	add	r1, sp, #48	; 0x30
 8005fac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005fb0:	e745      	b.n	8005e3e <__kernel_rem_pio2+0x1c2>
 8005fb2:	1e72      	subs	r2, r6, #1
 8005fb4:	ab0c      	add	r3, sp, #48	; 0x30
 8005fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005fbe:	e7f4      	b.n	8005faa <__kernel_rem_pio2+0x32e>
 8005fc0:	a90c      	add	r1, sp, #48	; 0x30
 8005fc2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	e796      	b.n	8005efa <__kernel_rem_pio2+0x27e>
 8005fcc:	3401      	adds	r4, #1
 8005fce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	d0fa      	beq.n	8005fcc <__kernel_rem_pio2+0x350>
 8005fd6:	9b08      	ldr	r3, [sp, #32]
 8005fd8:	f106 0801 	add.w	r8, r6, #1
 8005fdc:	18f5      	adds	r5, r6, r3
 8005fde:	ab20      	add	r3, sp, #128	; 0x80
 8005fe0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005fe4:	4434      	add	r4, r6
 8005fe6:	4544      	cmp	r4, r8
 8005fe8:	da04      	bge.n	8005ff4 <__kernel_rem_pio2+0x378>
 8005fea:	4626      	mov	r6, r4
 8005fec:	e6bf      	b.n	8005d6e <__kernel_rem_pio2+0xf2>
 8005fee:	2401      	movs	r4, #1
 8005ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ff2:	e7ec      	b.n	8005fce <__kernel_rem_pio2+0x352>
 8005ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff6:	f04f 0900 	mov.w	r9, #0
 8005ffa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005ffe:	f7fa faad 	bl	800055c <__aeabi_i2d>
 8006002:	2600      	movs	r6, #0
 8006004:	2700      	movs	r7, #0
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	e9c5 0100 	strd	r0, r1, [r5]
 800600c:	3b08      	subs	r3, #8
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	9504      	str	r5, [sp, #16]
 8006012:	9b07      	ldr	r3, [sp, #28]
 8006014:	4599      	cmp	r9, r3
 8006016:	dd05      	ble.n	8006024 <__kernel_rem_pio2+0x3a8>
 8006018:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800601c:	f108 0801 	add.w	r8, r8, #1
 8006020:	3508      	adds	r5, #8
 8006022:	e7e0      	b.n	8005fe6 <__kernel_rem_pio2+0x36a>
 8006024:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006028:	9900      	ldr	r1, [sp, #0]
 800602a:	f109 0901 	add.w	r9, r9, #1
 800602e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006032:	9100      	str	r1, [sp, #0]
 8006034:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8006038:	f8cd c010 	str.w	ip, [sp, #16]
 800603c:	f7fa faf8 	bl	8000630 <__aeabi_dmul>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f7fa f93c 	bl	80002c4 <__adddf3>
 800604c:	4606      	mov	r6, r0
 800604e:	460f      	mov	r7, r1
 8006050:	e7df      	b.n	8006012 <__kernel_rem_pio2+0x396>
 8006052:	3c01      	subs	r4, #1
 8006054:	e756      	b.n	8005f04 <__kernel_rem_pio2+0x288>
 8006056:	f1cb 0200 	rsb	r2, fp, #0
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	f000 fc87 	bl	8006970 <scalbn>
 8006062:	2200      	movs	r2, #0
 8006064:	4ba4      	ldr	r3, [pc, #656]	; (80062f8 <__kernel_rem_pio2+0x67c>)
 8006066:	4604      	mov	r4, r0
 8006068:	460d      	mov	r5, r1
 800606a:	f7fa fd67 	bl	8000b3c <__aeabi_dcmpge>
 800606e:	b1f8      	cbz	r0, 80060b0 <__kernel_rem_pio2+0x434>
 8006070:	2200      	movs	r2, #0
 8006072:	4ba2      	ldr	r3, [pc, #648]	; (80062fc <__kernel_rem_pio2+0x680>)
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f7fa fada 	bl	8000630 <__aeabi_dmul>
 800607c:	f7fa fd72 	bl	8000b64 <__aeabi_d2iz>
 8006080:	4607      	mov	r7, r0
 8006082:	f7fa fa6b 	bl	800055c <__aeabi_i2d>
 8006086:	2200      	movs	r2, #0
 8006088:	4b9b      	ldr	r3, [pc, #620]	; (80062f8 <__kernel_rem_pio2+0x67c>)
 800608a:	f7fa fad1 	bl	8000630 <__aeabi_dmul>
 800608e:	460b      	mov	r3, r1
 8006090:	4602      	mov	r2, r0
 8006092:	4629      	mov	r1, r5
 8006094:	4620      	mov	r0, r4
 8006096:	f7fa f913 	bl	80002c0 <__aeabi_dsub>
 800609a:	f7fa fd63 	bl	8000b64 <__aeabi_d2iz>
 800609e:	1c74      	adds	r4, r6, #1
 80060a0:	ab0c      	add	r3, sp, #48	; 0x30
 80060a2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80060a6:	f10b 0b18 	add.w	fp, fp, #24
 80060aa:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80060ae:	e731      	b.n	8005f14 <__kernel_rem_pio2+0x298>
 80060b0:	4620      	mov	r0, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	f7fa fd56 	bl	8000b64 <__aeabi_d2iz>
 80060b8:	ab0c      	add	r3, sp, #48	; 0x30
 80060ba:	4634      	mov	r4, r6
 80060bc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80060c0:	e728      	b.n	8005f14 <__kernel_rem_pio2+0x298>
 80060c2:	ab0c      	add	r3, sp, #48	; 0x30
 80060c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80060c8:	f7fa fa48 	bl	800055c <__aeabi_i2d>
 80060cc:	4632      	mov	r2, r6
 80060ce:	463b      	mov	r3, r7
 80060d0:	f7fa faae 	bl	8000630 <__aeabi_dmul>
 80060d4:	4642      	mov	r2, r8
 80060d6:	e86b 0102 	strd	r0, r1, [fp], #-8
 80060da:	464b      	mov	r3, r9
 80060dc:	4630      	mov	r0, r6
 80060de:	4639      	mov	r1, r7
 80060e0:	f7fa faa6 	bl	8000630 <__aeabi_dmul>
 80060e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060e8:	4606      	mov	r6, r0
 80060ea:	460f      	mov	r7, r1
 80060ec:	e722      	b.n	8005f34 <__kernel_rem_pio2+0x2b8>
 80060ee:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80060f2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80060f6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80060fa:	f8cd c01c 	str.w	ip, [sp, #28]
 80060fe:	f7fa fa97 	bl	8000630 <__aeabi_dmul>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4650      	mov	r0, sl
 8006108:	4659      	mov	r1, fp
 800610a:	f7fa f8db 	bl	80002c4 <__adddf3>
 800610e:	4682      	mov	sl, r0
 8006110:	468b      	mov	fp, r1
 8006112:	f108 0801 	add.w	r8, r8, #1
 8006116:	9b02      	ldr	r3, [sp, #8]
 8006118:	4598      	cmp	r8, r3
 800611a:	dc01      	bgt.n	8006120 <__kernel_rem_pio2+0x4a4>
 800611c:	45b8      	cmp	r8, r7
 800611e:	dde6      	ble.n	80060ee <__kernel_rem_pio2+0x472>
 8006120:	ab48      	add	r3, sp, #288	; 0x120
 8006122:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006126:	e9c7 ab00 	strd	sl, fp, [r7]
 800612a:	3e01      	subs	r6, #1
 800612c:	e707      	b.n	8005f3e <__kernel_rem_pio2+0x2c2>
 800612e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006130:	2b02      	cmp	r3, #2
 8006132:	dc09      	bgt.n	8006148 <__kernel_rem_pio2+0x4cc>
 8006134:	2b00      	cmp	r3, #0
 8006136:	dc32      	bgt.n	800619e <__kernel_rem_pio2+0x522>
 8006138:	d05a      	beq.n	80061f0 <__kernel_rem_pio2+0x574>
 800613a:	9b04      	ldr	r3, [sp, #16]
 800613c:	f003 0007 	and.w	r0, r3, #7
 8006140:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006148:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800614a:	2b03      	cmp	r3, #3
 800614c:	d1f5      	bne.n	800613a <__kernel_rem_pio2+0x4be>
 800614e:	ab48      	add	r3, sp, #288	; 0x120
 8006150:	441d      	add	r5, r3
 8006152:	46aa      	mov	sl, r5
 8006154:	46a3      	mov	fp, r4
 8006156:	f1bb 0f00 	cmp.w	fp, #0
 800615a:	dc76      	bgt.n	800624a <__kernel_rem_pio2+0x5ce>
 800615c:	46aa      	mov	sl, r5
 800615e:	46a3      	mov	fp, r4
 8006160:	f1bb 0f01 	cmp.w	fp, #1
 8006164:	f300 8090 	bgt.w	8006288 <__kernel_rem_pio2+0x60c>
 8006168:	2700      	movs	r7, #0
 800616a:	463e      	mov	r6, r7
 800616c:	2c01      	cmp	r4, #1
 800616e:	f300 80aa 	bgt.w	80062c6 <__kernel_rem_pio2+0x64a>
 8006172:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8006176:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800617a:	9b00      	ldr	r3, [sp, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f040 80ac 	bne.w	80062da <__kernel_rem_pio2+0x65e>
 8006182:	4603      	mov	r3, r0
 8006184:	462a      	mov	r2, r5
 8006186:	9806      	ldr	r0, [sp, #24]
 8006188:	e9c0 2300 	strd	r2, r3, [r0]
 800618c:	4622      	mov	r2, r4
 800618e:	460b      	mov	r3, r1
 8006190:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006194:	463a      	mov	r2, r7
 8006196:	4633      	mov	r3, r6
 8006198:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800619c:	e7cd      	b.n	800613a <__kernel_rem_pio2+0x4be>
 800619e:	2000      	movs	r0, #0
 80061a0:	46a0      	mov	r8, r4
 80061a2:	4601      	mov	r1, r0
 80061a4:	ab48      	add	r3, sp, #288	; 0x120
 80061a6:	441d      	add	r5, r3
 80061a8:	f1b8 0f00 	cmp.w	r8, #0
 80061ac:	da3a      	bge.n	8006224 <__kernel_rem_pio2+0x5a8>
 80061ae:	9b00      	ldr	r3, [sp, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d03e      	beq.n	8006232 <__kernel_rem_pio2+0x5b6>
 80061b4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80061b8:	4602      	mov	r2, r0
 80061ba:	462b      	mov	r3, r5
 80061bc:	9d06      	ldr	r5, [sp, #24]
 80061be:	2601      	movs	r6, #1
 80061c0:	e9c5 2300 	strd	r2, r3, [r5]
 80061c4:	460b      	mov	r3, r1
 80061c6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80061ca:	f7fa f879 	bl	80002c0 <__aeabi_dsub>
 80061ce:	4684      	mov	ip, r0
 80061d0:	460f      	mov	r7, r1
 80061d2:	ad48      	add	r5, sp, #288	; 0x120
 80061d4:	42b4      	cmp	r4, r6
 80061d6:	f105 0508 	add.w	r5, r5, #8
 80061da:	da2c      	bge.n	8006236 <__kernel_rem_pio2+0x5ba>
 80061dc:	9b00      	ldr	r3, [sp, #0]
 80061de:	b10b      	cbz	r3, 80061e4 <__kernel_rem_pio2+0x568>
 80061e0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80061e4:	4662      	mov	r2, ip
 80061e6:	463b      	mov	r3, r7
 80061e8:	9906      	ldr	r1, [sp, #24]
 80061ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80061ee:	e7a4      	b.n	800613a <__kernel_rem_pio2+0x4be>
 80061f0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80061f2:	ab48      	add	r3, sp, #288	; 0x120
 80061f4:	4637      	mov	r7, r6
 80061f6:	441d      	add	r5, r3
 80061f8:	2c00      	cmp	r4, #0
 80061fa:	da09      	bge.n	8006210 <__kernel_rem_pio2+0x594>
 80061fc:	9b00      	ldr	r3, [sp, #0]
 80061fe:	b10b      	cbz	r3, 8006204 <__kernel_rem_pio2+0x588>
 8006200:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006204:	4632      	mov	r2, r6
 8006206:	463b      	mov	r3, r7
 8006208:	9906      	ldr	r1, [sp, #24]
 800620a:	e9c1 2300 	strd	r2, r3, [r1]
 800620e:	e794      	b.n	800613a <__kernel_rem_pio2+0x4be>
 8006210:	4630      	mov	r0, r6
 8006212:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006216:	4639      	mov	r1, r7
 8006218:	f7fa f854 	bl	80002c4 <__adddf3>
 800621c:	3c01      	subs	r4, #1
 800621e:	4606      	mov	r6, r0
 8006220:	460f      	mov	r7, r1
 8006222:	e7e9      	b.n	80061f8 <__kernel_rem_pio2+0x57c>
 8006224:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006228:	f7fa f84c 	bl	80002c4 <__adddf3>
 800622c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006230:	e7ba      	b.n	80061a8 <__kernel_rem_pio2+0x52c>
 8006232:	460d      	mov	r5, r1
 8006234:	e7c0      	b.n	80061b8 <__kernel_rem_pio2+0x53c>
 8006236:	4660      	mov	r0, ip
 8006238:	e9d5 2300 	ldrd	r2, r3, [r5]
 800623c:	4639      	mov	r1, r7
 800623e:	f7fa f841 	bl	80002c4 <__adddf3>
 8006242:	3601      	adds	r6, #1
 8006244:	4684      	mov	ip, r0
 8006246:	460f      	mov	r7, r1
 8006248:	e7c4      	b.n	80061d4 <__kernel_rem_pio2+0x558>
 800624a:	e9da 6700 	ldrd	r6, r7, [sl]
 800624e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006252:	4632      	mov	r2, r6
 8006254:	463b      	mov	r3, r7
 8006256:	4640      	mov	r0, r8
 8006258:	4649      	mov	r1, r9
 800625a:	f7fa f833 	bl	80002c4 <__adddf3>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006266:	4640      	mov	r0, r8
 8006268:	4649      	mov	r1, r9
 800626a:	f7fa f829 	bl	80002c0 <__aeabi_dsub>
 800626e:	4632      	mov	r2, r6
 8006270:	463b      	mov	r3, r7
 8006272:	f7fa f827 	bl	80002c4 <__adddf3>
 8006276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800627a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800627e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006282:	e9ca 2300 	strd	r2, r3, [sl]
 8006286:	e766      	b.n	8006156 <__kernel_rem_pio2+0x4da>
 8006288:	e9da 8900 	ldrd	r8, r9, [sl]
 800628c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8006290:	4642      	mov	r2, r8
 8006292:	464b      	mov	r3, r9
 8006294:	4630      	mov	r0, r6
 8006296:	4639      	mov	r1, r7
 8006298:	f7fa f814 	bl	80002c4 <__adddf3>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062a4:	4630      	mov	r0, r6
 80062a6:	4639      	mov	r1, r7
 80062a8:	f7fa f80a 	bl	80002c0 <__aeabi_dsub>
 80062ac:	4642      	mov	r2, r8
 80062ae:	464b      	mov	r3, r9
 80062b0:	f7fa f808 	bl	80002c4 <__adddf3>
 80062b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062b8:	e86a 0102 	strd	r0, r1, [sl], #-8
 80062bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062c0:	e9ca 2300 	strd	r2, r3, [sl]
 80062c4:	e74c      	b.n	8006160 <__kernel_rem_pio2+0x4e4>
 80062c6:	4638      	mov	r0, r7
 80062c8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80062cc:	4631      	mov	r1, r6
 80062ce:	f7f9 fff9 	bl	80002c4 <__adddf3>
 80062d2:	3c01      	subs	r4, #1
 80062d4:	4607      	mov	r7, r0
 80062d6:	460e      	mov	r6, r1
 80062d8:	e748      	b.n	800616c <__kernel_rem_pio2+0x4f0>
 80062da:	9b06      	ldr	r3, [sp, #24]
 80062dc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80062e0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80062e4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80062e8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80062ec:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80062f0:	601d      	str	r5, [r3, #0]
 80062f2:	615e      	str	r6, [r3, #20]
 80062f4:	e721      	b.n	800613a <__kernel_rem_pio2+0x4be>
 80062f6:	bf00      	nop
 80062f8:	41700000 	.word	0x41700000
 80062fc:	3e700000 	.word	0x3e700000

08006300 <__kernel_sin>:
 8006300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	e9cd 2300 	strd	r2, r3, [sp]
 800630a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800630e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006312:	4682      	mov	sl, r0
 8006314:	460c      	mov	r4, r1
 8006316:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006318:	da03      	bge.n	8006322 <__kernel_sin+0x22>
 800631a:	f7fa fc23 	bl	8000b64 <__aeabi_d2iz>
 800631e:	2800      	cmp	r0, #0
 8006320:	d050      	beq.n	80063c4 <__kernel_sin+0xc4>
 8006322:	4652      	mov	r2, sl
 8006324:	4623      	mov	r3, r4
 8006326:	4650      	mov	r0, sl
 8006328:	4621      	mov	r1, r4
 800632a:	f7fa f981 	bl	8000630 <__aeabi_dmul>
 800632e:	4606      	mov	r6, r0
 8006330:	460f      	mov	r7, r1
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4650      	mov	r0, sl
 8006338:	4621      	mov	r1, r4
 800633a:	f7fa f979 	bl	8000630 <__aeabi_dmul>
 800633e:	a33e      	add	r3, pc, #248	; (adr r3, 8006438 <__kernel_sin+0x138>)
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	f7fa f970 	bl	8000630 <__aeabi_dmul>
 8006350:	a33b      	add	r3, pc, #236	; (adr r3, 8006440 <__kernel_sin+0x140>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7f9 ffb3 	bl	80002c0 <__aeabi_dsub>
 800635a:	4632      	mov	r2, r6
 800635c:	463b      	mov	r3, r7
 800635e:	f7fa f967 	bl	8000630 <__aeabi_dmul>
 8006362:	a339      	add	r3, pc, #228	; (adr r3, 8006448 <__kernel_sin+0x148>)
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f7f9 ffac 	bl	80002c4 <__adddf3>
 800636c:	4632      	mov	r2, r6
 800636e:	463b      	mov	r3, r7
 8006370:	f7fa f95e 	bl	8000630 <__aeabi_dmul>
 8006374:	a336      	add	r3, pc, #216	; (adr r3, 8006450 <__kernel_sin+0x150>)
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f7f9 ffa1 	bl	80002c0 <__aeabi_dsub>
 800637e:	4632      	mov	r2, r6
 8006380:	463b      	mov	r3, r7
 8006382:	f7fa f955 	bl	8000630 <__aeabi_dmul>
 8006386:	a334      	add	r3, pc, #208	; (adr r3, 8006458 <__kernel_sin+0x158>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f7f9 ff9a 	bl	80002c4 <__adddf3>
 8006390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006394:	b9dd      	cbnz	r5, 80063ce <__kernel_sin+0xce>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7fa f947 	bl	8000630 <__aeabi_dmul>
 80063a2:	a32f      	add	r3, pc, #188	; (adr r3, 8006460 <__kernel_sin+0x160>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f7f9 ff8a 	bl	80002c0 <__aeabi_dsub>
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	f7fa f93e 	bl	8000630 <__aeabi_dmul>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4650      	mov	r0, sl
 80063ba:	4621      	mov	r1, r4
 80063bc:	f7f9 ff82 	bl	80002c4 <__adddf3>
 80063c0:	4682      	mov	sl, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	4650      	mov	r0, sl
 80063c6:	4621      	mov	r1, r4
 80063c8:	b006      	add	sp, #24
 80063ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ce:	2200      	movs	r2, #0
 80063d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d4:	4b24      	ldr	r3, [pc, #144]	; (8006468 <__kernel_sin+0x168>)
 80063d6:	f7fa f92b 	bl	8000630 <__aeabi_dmul>
 80063da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063e2:	4640      	mov	r0, r8
 80063e4:	4649      	mov	r1, r9
 80063e6:	f7fa f923 	bl	8000630 <__aeabi_dmul>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f2:	f7f9 ff65 	bl	80002c0 <__aeabi_dsub>
 80063f6:	4632      	mov	r2, r6
 80063f8:	463b      	mov	r3, r7
 80063fa:	f7fa f919 	bl	8000630 <__aeabi_dmul>
 80063fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006402:	f7f9 ff5d 	bl	80002c0 <__aeabi_dsub>
 8006406:	a316      	add	r3, pc, #88	; (adr r3, 8006460 <__kernel_sin+0x160>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	4606      	mov	r6, r0
 800640e:	460f      	mov	r7, r1
 8006410:	4640      	mov	r0, r8
 8006412:	4649      	mov	r1, r9
 8006414:	f7fa f90c 	bl	8000630 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f7f9 ff50 	bl	80002c4 <__adddf3>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4650      	mov	r0, sl
 800642a:	4621      	mov	r1, r4
 800642c:	f7f9 ff48 	bl	80002c0 <__aeabi_dsub>
 8006430:	e7c6      	b.n	80063c0 <__kernel_sin+0xc0>
 8006432:	bf00      	nop
 8006434:	f3af 8000 	nop.w
 8006438:	5acfd57c 	.word	0x5acfd57c
 800643c:	3de5d93a 	.word	0x3de5d93a
 8006440:	8a2b9ceb 	.word	0x8a2b9ceb
 8006444:	3e5ae5e6 	.word	0x3e5ae5e6
 8006448:	57b1fe7d 	.word	0x57b1fe7d
 800644c:	3ec71de3 	.word	0x3ec71de3
 8006450:	19c161d5 	.word	0x19c161d5
 8006454:	3f2a01a0 	.word	0x3f2a01a0
 8006458:	1110f8a6 	.word	0x1110f8a6
 800645c:	3f811111 	.word	0x3f811111
 8006460:	55555549 	.word	0x55555549
 8006464:	3fc55555 	.word	0x3fc55555
 8006468:	3fe00000 	.word	0x3fe00000
 800646c:	00000000 	.word	0x00000000

08006470 <__kernel_tan>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	b08b      	sub	sp, #44	; 0x2c
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	4bd9      	ldr	r3, [pc, #868]	; (80067e0 <__kernel_tan+0x370>)
 800647a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800647e:	429e      	cmp	r6, r3
 8006480:	4604      	mov	r4, r0
 8006482:	460d      	mov	r5, r1
 8006484:	4682      	mov	sl, r0
 8006486:	468b      	mov	fp, r1
 8006488:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800648a:	9202      	str	r2, [sp, #8]
 800648c:	9107      	str	r1, [sp, #28]
 800648e:	dc58      	bgt.n	8006542 <__kernel_tan+0xd2>
 8006490:	f7fa fb68 	bl	8000b64 <__aeabi_d2iz>
 8006494:	4605      	mov	r5, r0
 8006496:	2800      	cmp	r0, #0
 8006498:	d178      	bne.n	800658c <__kernel_tan+0x11c>
 800649a:	1c7b      	adds	r3, r7, #1
 800649c:	4323      	orrs	r3, r4
 800649e:	4333      	orrs	r3, r6
 80064a0:	d110      	bne.n	80064c4 <__kernel_tan+0x54>
 80064a2:	4620      	mov	r0, r4
 80064a4:	4659      	mov	r1, fp
 80064a6:	f000 f9df 	bl	8006868 <fabs>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	2000      	movs	r0, #0
 80064b0:	49cc      	ldr	r1, [pc, #816]	; (80067e4 <__kernel_tan+0x374>)
 80064b2:	f7fa f9e7 	bl	8000884 <__aeabi_ddiv>
 80064b6:	4682      	mov	sl, r0
 80064b8:	468b      	mov	fp, r1
 80064ba:	4650      	mov	r0, sl
 80064bc:	4659      	mov	r1, fp
 80064be:	b00b      	add	sp, #44	; 0x2c
 80064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c4:	2f01      	cmp	r7, #1
 80064c6:	d0f8      	beq.n	80064ba <__kernel_tan+0x4a>
 80064c8:	4620      	mov	r0, r4
 80064ca:	4659      	mov	r1, fp
 80064cc:	9a02      	ldr	r2, [sp, #8]
 80064ce:	9b00      	ldr	r3, [sp, #0]
 80064d0:	f7f9 fef8 	bl	80002c4 <__adddf3>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	460f      	mov	r7, r1
 80064da:	2000      	movs	r0, #0
 80064dc:	49c2      	ldr	r1, [pc, #776]	; (80067e8 <__kernel_tan+0x378>)
 80064de:	f7fa f9d1 	bl	8000884 <__aeabi_ddiv>
 80064e2:	462e      	mov	r6, r5
 80064e4:	4689      	mov	r9, r1
 80064e6:	4652      	mov	r2, sl
 80064e8:	465b      	mov	r3, fp
 80064ea:	4680      	mov	r8, r0
 80064ec:	462c      	mov	r4, r5
 80064ee:	4630      	mov	r0, r6
 80064f0:	460d      	mov	r5, r1
 80064f2:	4639      	mov	r1, r7
 80064f4:	f7f9 fee4 	bl	80002c0 <__aeabi_dsub>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	9802      	ldr	r0, [sp, #8]
 80064fe:	9900      	ldr	r1, [sp, #0]
 8006500:	f7f9 fede 	bl	80002c0 <__aeabi_dsub>
 8006504:	4632      	mov	r2, r6
 8006506:	464b      	mov	r3, r9
 8006508:	f7fa f892 	bl	8000630 <__aeabi_dmul>
 800650c:	4632      	mov	r2, r6
 800650e:	4682      	mov	sl, r0
 8006510:	468b      	mov	fp, r1
 8006512:	464b      	mov	r3, r9
 8006514:	4630      	mov	r0, r6
 8006516:	4639      	mov	r1, r7
 8006518:	f7fa f88a 	bl	8000630 <__aeabi_dmul>
 800651c:	2200      	movs	r2, #0
 800651e:	4bb1      	ldr	r3, [pc, #708]	; (80067e4 <__kernel_tan+0x374>)
 8006520:	f7f9 fed0 	bl	80002c4 <__adddf3>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4650      	mov	r0, sl
 800652a:	4659      	mov	r1, fp
 800652c:	f7f9 feca 	bl	80002c4 <__adddf3>
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	f7fa f87c 	bl	8000630 <__aeabi_dmul>
 8006538:	4622      	mov	r2, r4
 800653a:	462b      	mov	r3, r5
 800653c:	f7f9 fec2 	bl	80002c4 <__adddf3>
 8006540:	e7b9      	b.n	80064b6 <__kernel_tan+0x46>
 8006542:	4baa      	ldr	r3, [pc, #680]	; (80067ec <__kernel_tan+0x37c>)
 8006544:	429e      	cmp	r6, r3
 8006546:	dd21      	ble.n	800658c <__kernel_tan+0x11c>
 8006548:	2900      	cmp	r1, #0
 800654a:	da06      	bge.n	800655a <__kernel_tan+0xea>
 800654c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006550:	469b      	mov	fp, r3
 8006552:	9b00      	ldr	r3, [sp, #0]
 8006554:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	4652      	mov	r2, sl
 800655c:	a182      	add	r1, pc, #520	; (adr r1, 8006768 <__kernel_tan+0x2f8>)
 800655e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006562:	465b      	mov	r3, fp
 8006564:	f7f9 feac 	bl	80002c0 <__aeabi_dsub>
 8006568:	4604      	mov	r4, r0
 800656a:	460d      	mov	r5, r1
 800656c:	a180      	add	r1, pc, #512	; (adr r1, 8006770 <__kernel_tan+0x300>)
 800656e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006572:	9a02      	ldr	r2, [sp, #8]
 8006574:	9b00      	ldr	r3, [sp, #0]
 8006576:	f7f9 fea3 	bl	80002c0 <__aeabi_dsub>
 800657a:	462b      	mov	r3, r5
 800657c:	4622      	mov	r2, r4
 800657e:	f7f9 fea1 	bl	80002c4 <__adddf3>
 8006582:	2300      	movs	r3, #0
 8006584:	4682      	mov	sl, r0
 8006586:	468b      	mov	fp, r1
 8006588:	9302      	str	r3, [sp, #8]
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	4652      	mov	r2, sl
 800658e:	465b      	mov	r3, fp
 8006590:	4650      	mov	r0, sl
 8006592:	4659      	mov	r1, fp
 8006594:	f7fa f84c 	bl	8000630 <__aeabi_dmul>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4680      	mov	r8, r0
 800659e:	4689      	mov	r9, r1
 80065a0:	f7fa f846 	bl	8000630 <__aeabi_dmul>
 80065a4:	4642      	mov	r2, r8
 80065a6:	4604      	mov	r4, r0
 80065a8:	460d      	mov	r5, r1
 80065aa:	464b      	mov	r3, r9
 80065ac:	4650      	mov	r0, sl
 80065ae:	4659      	mov	r1, fp
 80065b0:	f7fa f83e 	bl	8000630 <__aeabi_dmul>
 80065b4:	a370      	add	r3, pc, #448	; (adr r3, 8006778 <__kernel_tan+0x308>)
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065be:	4620      	mov	r0, r4
 80065c0:	4629      	mov	r1, r5
 80065c2:	f7fa f835 	bl	8000630 <__aeabi_dmul>
 80065c6:	a36e      	add	r3, pc, #440	; (adr r3, 8006780 <__kernel_tan+0x310>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7f9 fe7a 	bl	80002c4 <__adddf3>
 80065d0:	4622      	mov	r2, r4
 80065d2:	462b      	mov	r3, r5
 80065d4:	f7fa f82c 	bl	8000630 <__aeabi_dmul>
 80065d8:	a36b      	add	r3, pc, #428	; (adr r3, 8006788 <__kernel_tan+0x318>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7f9 fe71 	bl	80002c4 <__adddf3>
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	f7fa f823 	bl	8000630 <__aeabi_dmul>
 80065ea:	a369      	add	r3, pc, #420	; (adr r3, 8006790 <__kernel_tan+0x320>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7f9 fe68 	bl	80002c4 <__adddf3>
 80065f4:	4622      	mov	r2, r4
 80065f6:	462b      	mov	r3, r5
 80065f8:	f7fa f81a 	bl	8000630 <__aeabi_dmul>
 80065fc:	a366      	add	r3, pc, #408	; (adr r3, 8006798 <__kernel_tan+0x328>)
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	f7f9 fe5f 	bl	80002c4 <__adddf3>
 8006606:	4622      	mov	r2, r4
 8006608:	462b      	mov	r3, r5
 800660a:	f7fa f811 	bl	8000630 <__aeabi_dmul>
 800660e:	a364      	add	r3, pc, #400	; (adr r3, 80067a0 <__kernel_tan+0x330>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f7f9 fe56 	bl	80002c4 <__adddf3>
 8006618:	4642      	mov	r2, r8
 800661a:	464b      	mov	r3, r9
 800661c:	f7fa f808 	bl	8000630 <__aeabi_dmul>
 8006620:	a361      	add	r3, pc, #388	; (adr r3, 80067a8 <__kernel_tan+0x338>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800662a:	4620      	mov	r0, r4
 800662c:	4629      	mov	r1, r5
 800662e:	f7f9 ffff 	bl	8000630 <__aeabi_dmul>
 8006632:	a35f      	add	r3, pc, #380	; (adr r3, 80067b0 <__kernel_tan+0x340>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f7f9 fe44 	bl	80002c4 <__adddf3>
 800663c:	4622      	mov	r2, r4
 800663e:	462b      	mov	r3, r5
 8006640:	f7f9 fff6 	bl	8000630 <__aeabi_dmul>
 8006644:	a35c      	add	r3, pc, #368	; (adr r3, 80067b8 <__kernel_tan+0x348>)
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f7f9 fe3b 	bl	80002c4 <__adddf3>
 800664e:	4622      	mov	r2, r4
 8006650:	462b      	mov	r3, r5
 8006652:	f7f9 ffed 	bl	8000630 <__aeabi_dmul>
 8006656:	a35a      	add	r3, pc, #360	; (adr r3, 80067c0 <__kernel_tan+0x350>)
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	f7f9 fe32 	bl	80002c4 <__adddf3>
 8006660:	4622      	mov	r2, r4
 8006662:	462b      	mov	r3, r5
 8006664:	f7f9 ffe4 	bl	8000630 <__aeabi_dmul>
 8006668:	a357      	add	r3, pc, #348	; (adr r3, 80067c8 <__kernel_tan+0x358>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f7f9 fe29 	bl	80002c4 <__adddf3>
 8006672:	4622      	mov	r2, r4
 8006674:	462b      	mov	r3, r5
 8006676:	f7f9 ffdb 	bl	8000630 <__aeabi_dmul>
 800667a:	a355      	add	r3, pc, #340	; (adr r3, 80067d0 <__kernel_tan+0x360>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f7f9 fe20 	bl	80002c4 <__adddf3>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800668c:	f7f9 fe1a 	bl	80002c4 <__adddf3>
 8006690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006694:	f7f9 ffcc 	bl	8000630 <__aeabi_dmul>
 8006698:	9a02      	ldr	r2, [sp, #8]
 800669a:	9b00      	ldr	r3, [sp, #0]
 800669c:	f7f9 fe12 	bl	80002c4 <__adddf3>
 80066a0:	4642      	mov	r2, r8
 80066a2:	464b      	mov	r3, r9
 80066a4:	f7f9 ffc4 	bl	8000630 <__aeabi_dmul>
 80066a8:	9a02      	ldr	r2, [sp, #8]
 80066aa:	9b00      	ldr	r3, [sp, #0]
 80066ac:	f7f9 fe0a 	bl	80002c4 <__adddf3>
 80066b0:	a349      	add	r3, pc, #292	; (adr r3, 80067d8 <__kernel_tan+0x368>)
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	4604      	mov	r4, r0
 80066b8:	460d      	mov	r5, r1
 80066ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066be:	f7f9 ffb7 	bl	8000630 <__aeabi_dmul>
 80066c2:	4622      	mov	r2, r4
 80066c4:	462b      	mov	r3, r5
 80066c6:	f7f9 fdfd 	bl	80002c4 <__adddf3>
 80066ca:	460b      	mov	r3, r1
 80066cc:	e9cd 0100 	strd	r0, r1, [sp]
 80066d0:	4602      	mov	r2, r0
 80066d2:	4659      	mov	r1, fp
 80066d4:	4650      	mov	r0, sl
 80066d6:	f7f9 fdf5 	bl	80002c4 <__adddf3>
 80066da:	4b44      	ldr	r3, [pc, #272]	; (80067ec <__kernel_tan+0x37c>)
 80066dc:	4604      	mov	r4, r0
 80066de:	429e      	cmp	r6, r3
 80066e0:	460d      	mov	r5, r1
 80066e2:	f340 8085 	ble.w	80067f0 <__kernel_tan+0x380>
 80066e6:	4638      	mov	r0, r7
 80066e8:	f7f9 ff38 	bl	800055c <__aeabi_i2d>
 80066ec:	4622      	mov	r2, r4
 80066ee:	4680      	mov	r8, r0
 80066f0:	4689      	mov	r9, r1
 80066f2:	462b      	mov	r3, r5
 80066f4:	4620      	mov	r0, r4
 80066f6:	4629      	mov	r1, r5
 80066f8:	f7f9 ff9a 	bl	8000630 <__aeabi_dmul>
 80066fc:	4642      	mov	r2, r8
 80066fe:	4606      	mov	r6, r0
 8006700:	460f      	mov	r7, r1
 8006702:	464b      	mov	r3, r9
 8006704:	4620      	mov	r0, r4
 8006706:	4629      	mov	r1, r5
 8006708:	f7f9 fddc 	bl	80002c4 <__adddf3>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f7fa f8b6 	bl	8000884 <__aeabi_ddiv>
 8006718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800671c:	f7f9 fdd0 	bl	80002c0 <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4650      	mov	r0, sl
 8006726:	4659      	mov	r1, fp
 8006728:	f7f9 fdca 	bl	80002c0 <__aeabi_dsub>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	f7f9 fdc8 	bl	80002c4 <__adddf3>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	f7f9 fdc0 	bl	80002c0 <__aeabi_dsub>
 8006740:	9b07      	ldr	r3, [sp, #28]
 8006742:	4604      	mov	r4, r0
 8006744:	179b      	asrs	r3, r3, #30
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	f1c3 0001 	rsb	r0, r3, #1
 800674e:	460d      	mov	r5, r1
 8006750:	f7f9 ff04 	bl	800055c <__aeabi_i2d>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4620      	mov	r0, r4
 800675a:	4629      	mov	r1, r5
 800675c:	f7f9 ff68 	bl	8000630 <__aeabi_dmul>
 8006760:	e6a9      	b.n	80064b6 <__kernel_tan+0x46>
 8006762:	bf00      	nop
 8006764:	f3af 8000 	nop.w
 8006768:	54442d18 	.word	0x54442d18
 800676c:	3fe921fb 	.word	0x3fe921fb
 8006770:	33145c07 	.word	0x33145c07
 8006774:	3c81a626 	.word	0x3c81a626
 8006778:	74bf7ad4 	.word	0x74bf7ad4
 800677c:	3efb2a70 	.word	0x3efb2a70
 8006780:	32f0a7e9 	.word	0x32f0a7e9
 8006784:	3f12b80f 	.word	0x3f12b80f
 8006788:	1a8d1068 	.word	0x1a8d1068
 800678c:	3f3026f7 	.word	0x3f3026f7
 8006790:	fee08315 	.word	0xfee08315
 8006794:	3f57dbc8 	.word	0x3f57dbc8
 8006798:	e96e8493 	.word	0xe96e8493
 800679c:	3f8226e3 	.word	0x3f8226e3
 80067a0:	1bb341fe 	.word	0x1bb341fe
 80067a4:	3faba1ba 	.word	0x3faba1ba
 80067a8:	db605373 	.word	0xdb605373
 80067ac:	bef375cb 	.word	0xbef375cb
 80067b0:	a03792a6 	.word	0xa03792a6
 80067b4:	3f147e88 	.word	0x3f147e88
 80067b8:	f2f26501 	.word	0xf2f26501
 80067bc:	3f4344d8 	.word	0x3f4344d8
 80067c0:	c9560328 	.word	0xc9560328
 80067c4:	3f6d6d22 	.word	0x3f6d6d22
 80067c8:	8406d637 	.word	0x8406d637
 80067cc:	3f9664f4 	.word	0x3f9664f4
 80067d0:	1110fe7a 	.word	0x1110fe7a
 80067d4:	3fc11111 	.word	0x3fc11111
 80067d8:	55555563 	.word	0x55555563
 80067dc:	3fd55555 	.word	0x3fd55555
 80067e0:	3e2fffff 	.word	0x3e2fffff
 80067e4:	3ff00000 	.word	0x3ff00000
 80067e8:	bff00000 	.word	0xbff00000
 80067ec:	3fe59427 	.word	0x3fe59427
 80067f0:	2f01      	cmp	r7, #1
 80067f2:	d031      	beq.n	8006858 <__kernel_tan+0x3e8>
 80067f4:	460f      	mov	r7, r1
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	2000      	movs	r0, #0
 80067fc:	4918      	ldr	r1, [pc, #96]	; (8006860 <__kernel_tan+0x3f0>)
 80067fe:	f7fa f841 	bl	8000884 <__aeabi_ddiv>
 8006802:	2600      	movs	r6, #0
 8006804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006808:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800680c:	4652      	mov	r2, sl
 800680e:	465b      	mov	r3, fp
 8006810:	4630      	mov	r0, r6
 8006812:	4639      	mov	r1, r7
 8006814:	f7f9 fd54 	bl	80002c0 <__aeabi_dsub>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006820:	f7f9 fd4e 	bl	80002c0 <__aeabi_dsub>
 8006824:	4632      	mov	r2, r6
 8006826:	462b      	mov	r3, r5
 8006828:	f7f9 ff02 	bl	8000630 <__aeabi_dmul>
 800682c:	4632      	mov	r2, r6
 800682e:	4682      	mov	sl, r0
 8006830:	468b      	mov	fp, r1
 8006832:	462b      	mov	r3, r5
 8006834:	4630      	mov	r0, r6
 8006836:	4639      	mov	r1, r7
 8006838:	f7f9 fefa 	bl	8000630 <__aeabi_dmul>
 800683c:	2200      	movs	r2, #0
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <__kernel_tan+0x3f4>)
 8006840:	f7f9 fd40 	bl	80002c4 <__adddf3>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4650      	mov	r0, sl
 800684a:	4659      	mov	r1, fp
 800684c:	f7f9 fd3a 	bl	80002c4 <__adddf3>
 8006850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006854:	4634      	mov	r4, r6
 8006856:	e66d      	b.n	8006534 <__kernel_tan+0xc4>
 8006858:	4682      	mov	sl, r0
 800685a:	468b      	mov	fp, r1
 800685c:	e62d      	b.n	80064ba <__kernel_tan+0x4a>
 800685e:	bf00      	nop
 8006860:	bff00000 	.word	0xbff00000
 8006864:	3ff00000 	.word	0x3ff00000

08006868 <fabs>:
 8006868:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800686c:	4770      	bx	lr
	...

08006870 <floor>:
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006874:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006878:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800687c:	2e13      	cmp	r6, #19
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4607      	mov	r7, r0
 8006884:	460c      	mov	r4, r1
 8006886:	4605      	mov	r5, r0
 8006888:	dc33      	bgt.n	80068f2 <floor+0x82>
 800688a:	2e00      	cmp	r6, #0
 800688c:	da14      	bge.n	80068b8 <floor+0x48>
 800688e:	a334      	add	r3, pc, #208	; (adr r3, 8006960 <floor+0xf0>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f7f9 fd16 	bl	80002c4 <__adddf3>
 8006898:	2200      	movs	r2, #0
 800689a:	2300      	movs	r3, #0
 800689c:	f7fa f958 	bl	8000b50 <__aeabi_dcmpgt>
 80068a0:	b138      	cbz	r0, 80068b2 <floor+0x42>
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	da58      	bge.n	8006958 <floor+0xe8>
 80068a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80068aa:	431d      	orrs	r5, r3
 80068ac:	d001      	beq.n	80068b2 <floor+0x42>
 80068ae:	2500      	movs	r5, #0
 80068b0:	4c2d      	ldr	r4, [pc, #180]	; (8006968 <floor+0xf8>)
 80068b2:	4623      	mov	r3, r4
 80068b4:	462f      	mov	r7, r5
 80068b6:	e025      	b.n	8006904 <floor+0x94>
 80068b8:	4a2c      	ldr	r2, [pc, #176]	; (800696c <floor+0xfc>)
 80068ba:	fa42 f806 	asr.w	r8, r2, r6
 80068be:	ea01 0208 	and.w	r2, r1, r8
 80068c2:	4302      	orrs	r2, r0
 80068c4:	d01e      	beq.n	8006904 <floor+0x94>
 80068c6:	a326      	add	r3, pc, #152	; (adr r3, 8006960 <floor+0xf0>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7f9 fcfa 	bl	80002c4 <__adddf3>
 80068d0:	2200      	movs	r2, #0
 80068d2:	2300      	movs	r3, #0
 80068d4:	f7fa f93c 	bl	8000b50 <__aeabi_dcmpgt>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d0ea      	beq.n	80068b2 <floor+0x42>
 80068dc:	2c00      	cmp	r4, #0
 80068de:	bfbe      	ittt	lt
 80068e0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80068e4:	fa43 f606 	asrlt.w	r6, r3, r6
 80068e8:	19a4      	addlt	r4, r4, r6
 80068ea:	2500      	movs	r5, #0
 80068ec:	ea24 0408 	bic.w	r4, r4, r8
 80068f0:	e7df      	b.n	80068b2 <floor+0x42>
 80068f2:	2e33      	cmp	r6, #51	; 0x33
 80068f4:	dd0a      	ble.n	800690c <floor+0x9c>
 80068f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80068fa:	d103      	bne.n	8006904 <floor+0x94>
 80068fc:	f7f9 fce2 	bl	80002c4 <__adddf3>
 8006900:	4607      	mov	r7, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4638      	mov	r0, r7
 8006906:	4619      	mov	r1, r3
 8006908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800690c:	f04f 32ff 	mov.w	r2, #4294967295
 8006910:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006914:	fa22 f808 	lsr.w	r8, r2, r8
 8006918:	ea18 0f00 	tst.w	r8, r0
 800691c:	d0f2      	beq.n	8006904 <floor+0x94>
 800691e:	a310      	add	r3, pc, #64	; (adr r3, 8006960 <floor+0xf0>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f7f9 fcce 	bl	80002c4 <__adddf3>
 8006928:	2200      	movs	r2, #0
 800692a:	2300      	movs	r3, #0
 800692c:	f7fa f910 	bl	8000b50 <__aeabi_dcmpgt>
 8006930:	2800      	cmp	r0, #0
 8006932:	d0be      	beq.n	80068b2 <floor+0x42>
 8006934:	2c00      	cmp	r4, #0
 8006936:	da02      	bge.n	800693e <floor+0xce>
 8006938:	2e14      	cmp	r6, #20
 800693a:	d103      	bne.n	8006944 <floor+0xd4>
 800693c:	3401      	adds	r4, #1
 800693e:	ea25 0508 	bic.w	r5, r5, r8
 8006942:	e7b6      	b.n	80068b2 <floor+0x42>
 8006944:	2301      	movs	r3, #1
 8006946:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800694a:	fa03 f606 	lsl.w	r6, r3, r6
 800694e:	4435      	add	r5, r6
 8006950:	42bd      	cmp	r5, r7
 8006952:	bf38      	it	cc
 8006954:	18e4      	addcc	r4, r4, r3
 8006956:	e7f2      	b.n	800693e <floor+0xce>
 8006958:	2500      	movs	r5, #0
 800695a:	462c      	mov	r4, r5
 800695c:	e7a9      	b.n	80068b2 <floor+0x42>
 800695e:	bf00      	nop
 8006960:	8800759c 	.word	0x8800759c
 8006964:	7e37e43c 	.word	0x7e37e43c
 8006968:	bff00000 	.word	0xbff00000
 800696c:	000fffff 	.word	0x000fffff

08006970 <scalbn>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006976:	4604      	mov	r4, r0
 8006978:	460d      	mov	r5, r1
 800697a:	4617      	mov	r7, r2
 800697c:	460b      	mov	r3, r1
 800697e:	b996      	cbnz	r6, 80069a6 <scalbn+0x36>
 8006980:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006984:	4303      	orrs	r3, r0
 8006986:	d039      	beq.n	80069fc <scalbn+0x8c>
 8006988:	4b33      	ldr	r3, [pc, #204]	; (8006a58 <scalbn+0xe8>)
 800698a:	2200      	movs	r2, #0
 800698c:	f7f9 fe50 	bl	8000630 <__aeabi_dmul>
 8006990:	4b32      	ldr	r3, [pc, #200]	; (8006a5c <scalbn+0xec>)
 8006992:	4604      	mov	r4, r0
 8006994:	429f      	cmp	r7, r3
 8006996:	460d      	mov	r5, r1
 8006998:	da0f      	bge.n	80069ba <scalbn+0x4a>
 800699a:	a32b      	add	r3, pc, #172	; (adr r3, 8006a48 <scalbn+0xd8>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f7f9 fe46 	bl	8000630 <__aeabi_dmul>
 80069a4:	e006      	b.n	80069b4 <scalbn+0x44>
 80069a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80069aa:	4296      	cmp	r6, r2
 80069ac:	d10a      	bne.n	80069c4 <scalbn+0x54>
 80069ae:	4602      	mov	r2, r0
 80069b0:	f7f9 fc88 	bl	80002c4 <__adddf3>
 80069b4:	4604      	mov	r4, r0
 80069b6:	460d      	mov	r5, r1
 80069b8:	e020      	b.n	80069fc <scalbn+0x8c>
 80069ba:	460b      	mov	r3, r1
 80069bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80069c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80069c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80069c8:	19b9      	adds	r1, r7, r6
 80069ca:	4291      	cmp	r1, r2
 80069cc:	dd0e      	ble.n	80069ec <scalbn+0x7c>
 80069ce:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80069d2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80069d6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80069da:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80069de:	4820      	ldr	r0, [pc, #128]	; (8006a60 <scalbn+0xf0>)
 80069e0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80069e4:	a31a      	add	r3, pc, #104	; (adr r3, 8006a50 <scalbn+0xe0>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	e7d9      	b.n	80069a0 <scalbn+0x30>
 80069ec:	2900      	cmp	r1, #0
 80069ee:	dd08      	ble.n	8006a02 <scalbn+0x92>
 80069f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80069fc:	4620      	mov	r0, r4
 80069fe:	4629      	mov	r1, r5
 8006a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a02:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006a06:	da12      	bge.n	8006a2e <scalbn+0xbe>
 8006a08:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a0c:	429f      	cmp	r7, r3
 8006a0e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006a12:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006a16:	dcdc      	bgt.n	80069d2 <scalbn+0x62>
 8006a18:	a30b      	add	r3, pc, #44	; (adr r3, 8006a48 <scalbn+0xd8>)
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006a22:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006a26:	480f      	ldr	r0, [pc, #60]	; (8006a64 <scalbn+0xf4>)
 8006a28:	f041 011f 	orr.w	r1, r1, #31
 8006a2c:	e7b8      	b.n	80069a0 <scalbn+0x30>
 8006a2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a32:	3136      	adds	r1, #54	; 0x36
 8006a34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	2200      	movs	r2, #0
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <scalbn+0xf8>)
 8006a44:	e7ac      	b.n	80069a0 <scalbn+0x30>
 8006a46:	bf00      	nop
 8006a48:	c2f8f359 	.word	0xc2f8f359
 8006a4c:	01a56e1f 	.word	0x01a56e1f
 8006a50:	8800759c 	.word	0x8800759c
 8006a54:	7e37e43c 	.word	0x7e37e43c
 8006a58:	43500000 	.word	0x43500000
 8006a5c:	ffff3cb0 	.word	0xffff3cb0
 8006a60:	8800759c 	.word	0x8800759c
 8006a64:	c2f8f359 	.word	0xc2f8f359
 8006a68:	3c900000 	.word	0x3c900000

08006a6c <__libc_init_array>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	2600      	movs	r6, #0
 8006a70:	4d0c      	ldr	r5, [pc, #48]	; (8006aa4 <__libc_init_array+0x38>)
 8006a72:	4c0d      	ldr	r4, [pc, #52]	; (8006aa8 <__libc_init_array+0x3c>)
 8006a74:	1b64      	subs	r4, r4, r5
 8006a76:	10a4      	asrs	r4, r4, #2
 8006a78:	42a6      	cmp	r6, r4
 8006a7a:	d109      	bne.n	8006a90 <__libc_init_array+0x24>
 8006a7c:	f000 f822 	bl	8006ac4 <_init>
 8006a80:	2600      	movs	r6, #0
 8006a82:	4d0a      	ldr	r5, [pc, #40]	; (8006aac <__libc_init_array+0x40>)
 8006a84:	4c0a      	ldr	r4, [pc, #40]	; (8006ab0 <__libc_init_array+0x44>)
 8006a86:	1b64      	subs	r4, r4, r5
 8006a88:	10a4      	asrs	r4, r4, #2
 8006a8a:	42a6      	cmp	r6, r4
 8006a8c:	d105      	bne.n	8006a9a <__libc_init_array+0x2e>
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a94:	4798      	blx	r3
 8006a96:	3601      	adds	r6, #1
 8006a98:	e7ee      	b.n	8006a78 <__libc_init_array+0xc>
 8006a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a9e:	4798      	blx	r3
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	e7f2      	b.n	8006a8a <__libc_init_array+0x1e>
 8006aa4:	08006ce0 	.word	0x08006ce0
 8006aa8:	08006ce0 	.word	0x08006ce0
 8006aac:	08006ce0 	.word	0x08006ce0
 8006ab0:	08006ce4 	.word	0x08006ce4

08006ab4 <memset>:
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4402      	add	r2, r0
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d100      	bne.n	8006abe <memset+0xa>
 8006abc:	4770      	bx	lr
 8006abe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac2:	e7f9      	b.n	8006ab8 <memset+0x4>

08006ac4 <_init>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	bf00      	nop
 8006ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aca:	bc08      	pop	{r3}
 8006acc:	469e      	mov	lr, r3
 8006ace:	4770      	bx	lr

08006ad0 <_fini>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	bf00      	nop
 8006ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad6:	bc08      	pop	{r3}
 8006ad8:	469e      	mov	lr, r3
 8006ada:	4770      	bx	lr
